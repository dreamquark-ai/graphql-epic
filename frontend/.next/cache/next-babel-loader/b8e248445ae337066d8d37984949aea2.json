{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/components/Datasets.js\";\nimport { useQuery } from '@apollo/client';\nimport { ALL_DATASETS_QUERY } from '../graphql/query';\nimport Dataset from './Dataset';\nimport { perPage } from '../config';\nexport default function Products({\n  page\n}) {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(ALL_DATASETS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.allDatasets.map(dataset => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Dataset, {\n        dataset: dataset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this)\n    }, dataset.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/components/Datasets.js"],"names":["useQuery","ALL_DATASETS_QUERY","Dataset","perPage","Products","page","data","error","loading","variables","skip","first","message","allDatasets","map","dataset","id"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAA4B;AACzC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BR,QAAQ,CAACC,kBAAD,EAAqB;AAC5DQ,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAEL,IAAI,GAAGF,OAAP,GAAiBA,OADd;AAETQ,MAAAA,KAAK,EAAER;AAFE;AADiD,GAArB,CAAzC;AAOA,MAAIK,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACK,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACE;AAAA,cACGN,IAAI,CAACO,WAAL,CAAiBC,GAAjB,CAAsBC,OAAD,iBACpB;AAAA,6BACE,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF,OAAUA,OAAO,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD","sourcesContent":["import { useQuery } from '@apollo/client'\nimport { ALL_DATASETS_QUERY } from '../graphql/query'\nimport Dataset from './Dataset'\nimport { perPage } from '../config'\n\nexport default function Products({ page }) {\n  const { data, error, loading } = useQuery(ALL_DATASETS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n    },\n  })\n\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error: {error.message}</p>\n\n  return (\n    <div>\n      {data.allDatasets.map((dataset) => (\n        <div key={dataset.id}>\n          <Dataset dataset={dataset} />\n        </div>\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}