{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/organisms/cards/InfoCard.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // Utils\n\nimport { formatDateTime } from \"../../_utils\"; // Components\n\nimport { Card, CardTitle, CardSeparator, CardContent } from \"../../molecules/cards\";\nimport { DisplayResource, Display, DisplayContainer, DISPLAY_TYPES } from \"../../molecules/displays\";\nexport function InfoCard(_ref) {\n  let {\n    children,\n    className,\n    createdAt,\n    owners: ownersProp,\n    title = \"Information\"\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"children\", \"className\", \"createdAt\", \"owners\", \"title\"]);\n\n  const InfoCardClassName = classnames(\"brain-c-info-card\", className);\n  const owners = Array.isArray(ownersProp) ? ownersProp : [ownersProp];\n  return /*#__PURE__*/_jsxDEV(Card, _objectSpread(_objectSpread({}, otherProps), {}, {\n    className: InfoCardClassName,\n    children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(DisplayContainer, {\n        className: \"brain-c-info-card__display-container\",\n        type: DISPLAY_TYPES.VERTICAL,\n        children: [/*#__PURE__*/_jsxDEV(Display, {\n          label: \"Owner\",\n          value: owners.map(owner => /*#__PURE__*/_jsxDEV(DisplayResource, {\n            label: owner,\n            icon: \"user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Display, {\n          label: \"Creation date\",\n          value: formatDateTime(createdAt)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), children && /*#__PURE__*/_jsxDEV(CardSeparator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 26\n    }, this), children]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}\nInfoCard.propTypes = {\n  /**\n   * Content of the button\n   */\n  children: PropTypes.node,\n\n  /**\n   * Additional className for the Card\n   */\n  className: PropTypes.string,\n\n  /**\n   * Date of the creation\n   */\n  createdAt: PropTypes.string,\n\n  /**\n   *  Owner of the resource\n   */\n  owners: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /**\n   * Title of the card ( information )\n   */\n  title: PropTypes.string\n};","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/organisms/cards/InfoCard.js"],"names":["React","PropTypes","classnames","formatDateTime","Card","CardTitle","CardSeparator","CardContent","DisplayResource","Display","DisplayContainer","DISPLAY_TYPES","InfoCard","children","className","createdAt","owners","ownersProp","title","otherProps","InfoCardClassName","Array","isArray","VERTICAL","map","owner","propTypes","node","string","oneOfType","arrayOf"],"mappings":";;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,SAASC,cAAT,QAA+B,cAA/B,C,CAEA;;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,aAA1B,EAAyCC,WAAzC,QAA4D,uBAA5D;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,gBAAnC,EAAqDC,aAArD,QAA0E,0BAA1E;AAEA,OAAO,SAASC,QAAT,OAAgH;AAAA,MAA9F;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA,SAAvB;AAAkCC,IAAAA,MAAM,EAAEC,UAA1C;AAAsDC,IAAAA,KAAK,GAAG;AAA9D,GAA8F;AAAA,MAAdC,UAAc;;AACnH,QAAMC,iBAAiB,GAAGlB,UAAU,CAAC,mBAAD,EAAsBY,SAAtB,CAApC;AAEA,QAAME,MAAM,GAAGK,KAAK,CAACC,OAAN,CAAcL,UAAd,IAA4BA,UAA5B,GAAyC,CAACA,UAAD,CAAxD;AAEA,sBACI,QAAC,IAAD,kCAAUE,UAAV;AAAsB,IAAA,SAAS,EAAEC,iBAAjC;AAAA,4BACI,QAAC,SAAD;AAAA,gBAAYF;AAAZ;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,WAAD;AAAA,6BACI,QAAC,gBAAD;AAAkB,QAAA,SAAS,EAAC,sCAA5B;AAAmE,QAAA,IAAI,EAAEP,aAAa,CAACY,QAAvF;AAAA,gCACI,QAAC,OAAD;AACI,UAAA,KAAK,EAAC,OADV;AAEI,UAAA,KAAK,EAAEP,MAAM,CAACQ,GAAP,CAAYC,KAAD,iBACd,QAAC,eAAD;AAAiB,YAAA,KAAK,EAAEA,KAAxB;AAA+B,YAAA,IAAI,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,kBADG;AAFX;AAAA;AAAA;AAAA;AAAA,gBADJ,eAOI,QAAC,OAAD;AAAS,UAAA,KAAK,EAAC,eAAf;AAA+B,UAAA,KAAK,EAAEtB,cAAc,CAACY,SAAD;AAApD;AAAA;AAAA;AAAA;AAAA,gBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,EAaKF,QAAQ,iBAAI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAbjB,EAcKA,QAdL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;AAEDD,QAAQ,CAACc,SAAT,GAAqB;AACjB;AACJ;AACA;AACIb,EAAAA,QAAQ,EAAEZ,SAAS,CAAC0B,IAJH;;AAKjB;AACJ;AACA;AACIb,EAAAA,SAAS,EAAEb,SAAS,CAAC2B,MARJ;;AASjB;AACJ;AACA;AACIb,EAAAA,SAAS,EAAEd,SAAS,CAAC2B,MAZJ;;AAajB;AACJ;AACA;AACIZ,EAAAA,MAAM,EAAEf,SAAS,CAAC4B,SAAV,CAAoB,CAAC5B,SAAS,CAAC2B,MAAX,EAAmB3B,SAAS,CAAC6B,OAAV,CAAkB7B,SAAS,CAAC2B,MAA5B,CAAnB,CAApB,CAhBS;;AAiBjB;AACJ;AACA;AACIV,EAAAA,KAAK,EAAEjB,SAAS,CAAC2B;AApBA,CAArB","sourcesContent":["// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\n// Utils\nimport { formatDateTime } from \"../../_utils\";\n\n// Components\nimport { Card, CardTitle, CardSeparator, CardContent } from \"../../molecules/cards\";\nimport { DisplayResource, Display, DisplayContainer, DISPLAY_TYPES } from \"../../molecules/displays\";\n\nexport function InfoCard({ children, className, createdAt, owners: ownersProp, title = \"Information\", ...otherProps }) {\n    const InfoCardClassName = classnames(\"brain-c-info-card\", className);\n\n    const owners = Array.isArray(ownersProp) ? ownersProp : [ownersProp];\n\n    return (\n        <Card {...otherProps} className={InfoCardClassName}>\n            <CardTitle>{title}</CardTitle>\n            <CardContent>\n                <DisplayContainer className=\"brain-c-info-card__display-container\" type={DISPLAY_TYPES.VERTICAL}>\n                    <Display\n                        label=\"Owner\"\n                        value={owners.map((owner) => (\n                            <DisplayResource label={owner} icon=\"user\" />\n                        ))}\n                    />\n                    <Display label=\"Creation date\" value={formatDateTime(createdAt)} />\n                </DisplayContainer>\n            </CardContent>\n            {children && <CardSeparator />}\n            {children}\n        </Card>\n    );\n}\n\nInfoCard.propTypes = {\n    /**\n     * Content of the button\n     */\n    children: PropTypes.node,\n    /**\n     * Additional className for the Card\n     */\n    className: PropTypes.string,\n    /**\n     * Date of the creation\n     */\n    createdAt: PropTypes.string,\n    /**\n     *  Owner of the resource\n     */\n    owners: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n    /**\n     * Title of the card ( information )\n     */\n    title: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}