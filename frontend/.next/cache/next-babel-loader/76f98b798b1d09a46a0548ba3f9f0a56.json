{"ast":null,"code":"import _defineProperty from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/cards/CardTitle.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // Utils\n\nimport { alterElement } from \"../../_utils\"; // Components\n\nimport { Icon } from \"../icons\";\nimport { Tooltip } from \"../modals\";\nexport function CardTitle(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      _ref$helperIcon = _ref.helperIcon,\n      helperIcon = _ref$helperIcon === void 0 ? \"question-circle\" : _ref$helperIcon,\n      helperIconProps = _ref.helperIconProps,\n      helperText = _ref.helperText,\n      title = _ref.title,\n      otherProps = _objectWithoutProperties(_ref, [\"children\", \"className\", \"helperIcon\", \"helperIconProps\", \"helperText\", \"title\"]);\n\n  var titleClassName = classnames(\"brain-c-card__title\", className);\n  var wrappedChild = alterElement(title !== null && title !== void 0 ? title : children, {\n    className: \"brain-u-text--title\"\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n    className: titleClassName\n  }, otherProps), {}, {\n    children: [wrappedChild, helperText && /*#__PURE__*/_jsxDEV(Tooltip, {\n      tooltip: helperText,\n      children: /*#__PURE__*/_jsxDEV(Icon, _objectSpread(_objectSpread({}, helperIconProps), {}, {\n        className: \"brain-c-card__title-helper\",\n        children: helperIcon\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_c = CardTitle;\nCardTitle.propTypes = {\n  /**\n   * Content of title\n   */\n  children: PropTypes.node,\n\n  /**\n   * Additional className for title\n   */\n  className: PropTypes.string,\n\n  /**\n   * Helper icon to display\n   */\n  helperIcon: PropTypes.string,\n\n  /**\n   * Additional props for helper Icon\n   */\n  helperIconProps: PropTypes.shape(Icon.propTypes),\n\n  /**\n   * Helper text\n   */\n  helperText: PropTypes.string,\n\n  /**\n   * Title\n   */\n  title: PropTypes.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CardTitle\");","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/cards/CardTitle.js"],"names":["React","PropTypes","classnames","alterElement","Icon","Tooltip","CardTitle","children","className","helperIcon","helperIconProps","helperText","title","otherProps","titleClassName","wrappedChild","propTypes","node","string","shape"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,SAASC,YAAT,QAA6B,cAA7B,C,CAEA;;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAO,SAASC,SAAT,OAQJ;AAAA,MAPCC,QAOD,QAPCA,QAOD;AAAA,MANCC,SAMD,QANCA,SAMD;AAAA,6BALCC,UAKD;AAAA,MALCA,UAKD,gCALc,iBAKd;AAAA,MAJCC,eAID,QAJCA,eAID;AAAA,MAHCC,UAGD,QAHCA,UAGD;AAAA,MAFCC,KAED,QAFCA,KAED;AAAA,MADIC,UACJ;;AACC,MAAMC,cAAc,GAAGZ,UAAU,CAAC,qBAAD,EAAwBM,SAAxB,CAAjC;AAEA,MAAMO,YAAY,GAAGZ,YAAY,CAACS,KAAD,aAACA,KAAD,cAACA,KAAD,GAAUL,QAAV,EAAoB;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAApB,CAAjC;AAEA,sBACI;AAAK,IAAA,SAAS,EAAEM;AAAhB,KAAoCD,UAApC;AAAA,eACKE,YADL,EAEKJ,UAAU,iBACP,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAAA,6BACI,QAAC,IAAD,kCAAUD,eAAV;AAA2B,QAAA,SAAS,EAAC,4BAArC;AAAA,kBACKD;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;KAzBeH,S;AA2BhBA,SAAS,CAACU,SAAV,GAAsB;AAClB;AACJ;AACA;AACIT,EAAAA,QAAQ,EAAEN,SAAS,CAACgB,IAJF;;AAKlB;AACJ;AACA;AACIT,EAAAA,SAAS,EAAEP,SAAS,CAACiB,MARH;;AASlB;AACJ;AACA;AACIT,EAAAA,UAAU,EAAER,SAAS,CAACiB,MAZJ;;AAalB;AACJ;AACA;AACIR,EAAAA,eAAe,EAAET,SAAS,CAACkB,KAAV,CAAgBf,IAAI,CAACY,SAArB,CAhBC;;AAiBlB;AACJ;AACA;AACIL,EAAAA,UAAU,EAAEV,SAAS,CAACiB,MApBJ;;AAqBlB;AACJ;AACA;AACIN,EAAAA,KAAK,EAAEX,SAAS,CAACiB;AAxBC,CAAtB","sourcesContent":["// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\n// Utils\nimport { alterElement } from \"../../_utils\";\n\n// Components\nimport { Icon } from \"../icons\";\nimport { Tooltip } from \"../modals\";\n\nexport function CardTitle({\n    children,\n    className,\n    helperIcon = \"question-circle\",\n    helperIconProps,\n    helperText,\n    title,\n    ...otherProps\n}) {\n    const titleClassName = classnames(\"brain-c-card__title\", className);\n\n    const wrappedChild = alterElement(title ?? children, { className: \"brain-u-text--title\" });\n\n    return (\n        <div className={titleClassName} {...otherProps}>\n            {wrappedChild}\n            {helperText && (\n                <Tooltip tooltip={helperText}>\n                    <Icon {...helperIconProps} className=\"brain-c-card__title-helper\">\n                        {helperIcon}\n                    </Icon>\n                </Tooltip>\n            )}\n        </div>\n    );\n}\n\nCardTitle.propTypes = {\n    /**\n     * Content of title\n     */\n    children: PropTypes.node,\n    /**\n     * Additional className for title\n     */\n    className: PropTypes.string,\n    /**\n     * Helper icon to display\n     */\n    helperIcon: PropTypes.string,\n    /**\n     * Additional props for helper Icon\n     */\n    helperIconProps: PropTypes.shape(Icon.propTypes),\n    /**\n     * Helper text\n     */\n    helperText: PropTypes.string,\n    /**\n     * Title\n     */\n    title: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}