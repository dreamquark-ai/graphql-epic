{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Overlay.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nexport function Overlay(_ref) {\n  let {\n    className,\n    invisible = false,\n    onClick,\n    open = false\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"className\", \"invisible\", \"onClick\", \"open\"]);\n\n  const overlayClassName = classnames(\"brain-c-overlay\", {\n    \"brain-c-overlay--invisible\": invisible\n  }, className);\n\n  if (!open) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread({\n    \"aria-hidden\": true,\n    className: overlayClassName,\n    onClick: onClick\n  }, otherProps), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 12\n  }, this);\n}\nOverlay.propTypes = {\n  /**\n   * Additional className to overlay\n   */\n  className: PropTypes.string,\n\n  /**\n   * If overlay is invisible\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Click handler\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * If is open\n   */\n  open: PropTypes.bool\n};","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Overlay.js"],"names":["React","PropTypes","classnames","Overlay","className","invisible","onClick","open","otherProps","overlayClassName","propTypes","string","bool","func"],"mappings":";;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,SAASC,OAAT,OAAyF;AAAA,MAAxE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAS,GAAG,KAAzB;AAAgCC,IAAAA,OAAhC;AAAyCC,IAAAA,IAAI,GAAG;AAAhD,GAAwE;AAAA,MAAdC,UAAc;;AAC5F,QAAMC,gBAAgB,GAAGP,UAAU,CAC/B,iBAD+B,EAE/B;AACI,kCAA8BG;AADlC,GAF+B,EAK/BD,SAL+B,CAAnC;;AAQA,MAAI,CAACG,IAAL,EAAW;AACP,WAAO,IAAP;AACH;;AAED,sBAAO;AAAK,uBAAL;AAAiB,IAAA,SAAS,EAAEE,gBAA5B;AAA8C,IAAA,OAAO,EAAEH;AAAvD,KAAoEE,UAApE;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;AAEDL,OAAO,CAACO,SAAR,GAAoB;AAChB;AACJ;AACA;AACIN,EAAAA,SAAS,EAAEH,SAAS,CAACU,MAJL;;AAKhB;AACJ;AACA;AACIN,EAAAA,SAAS,EAAEJ,SAAS,CAACW,IARL;;AAShB;AACJ;AACA;AACIN,EAAAA,OAAO,EAAEL,SAAS,CAACY,IAZH;;AAahB;AACJ;AACA;AACIN,EAAAA,IAAI,EAAEN,SAAS,CAACW;AAhBA,CAApB","sourcesContent":["// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nexport function Overlay({ className, invisible = false, onClick, open = false, ...otherProps }) {\n    const overlayClassName = classnames(\n        \"brain-c-overlay\",\n        {\n            \"brain-c-overlay--invisible\": invisible,\n        },\n        className\n    );\n\n    if (!open) {\n        return null;\n    }\n\n    return <div aria-hidden className={overlayClassName} onClick={onClick} {...otherProps} />;\n}\n\nOverlay.propTypes = {\n    /**\n     * Additional className to overlay\n     */\n    className: PropTypes.string,\n    /**\n     * If overlay is invisible\n     */\n    invisible: PropTypes.bool,\n    /**\n     * Click handler\n     */\n    onClick: PropTypes.func,\n    /**\n     * If is open\n     */\n    open: PropTypes.bool,\n};\n"]},"metadata":{},"sourceType":"module"}