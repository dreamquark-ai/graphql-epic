{"ast":null,"code":"import _objectWithoutProperties from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Drawer.js\",\n    _OPPOSITE_DIRECTIONS,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // Utils\n\nimport { useIsMounted } from \"../../_utils\"; // Components\n\nimport { Slide, SLIDE_DIRECTION } from \"../animations\";\nimport { Modal } from \"./Modal\";\nexport var DRAWER_ANCHOR = {\n  TOP: \"top\",\n  LEFT: \"left\",\n  RIGHT: \"right\",\n  BOTTOM: \"bottom\"\n};\nvar OPPOSITE_DIRECTIONS = (_OPPOSITE_DIRECTIONS = {}, _defineProperty(_OPPOSITE_DIRECTIONS, DRAWER_ANCHOR.LEFT, SLIDE_DIRECTION.RIGHT), _defineProperty(_OPPOSITE_DIRECTIONS, DRAWER_ANCHOR.RIGHT, SLIDE_DIRECTION.LEFT), _defineProperty(_OPPOSITE_DIRECTIONS, DRAWER_ANCHOR.TOP, SLIDE_DIRECTION.DOWN), _defineProperty(_OPPOSITE_DIRECTIONS, DRAWER_ANCHOR.BOTTOM, SLIDE_DIRECTION.UP), _OPPOSITE_DIRECTIONS);\nexport function Drawer(_ref) {\n  _s();\n\n  var _ref$anchor = _ref.anchor,\n      anchor = _ref$anchor === void 0 ? DRAWER_ANCHOR.RIGHT : _ref$anchor,\n      children = _ref.children,\n      className = _ref.className,\n      modalClassNameProp = _ref.modalClassName,\n      modalProps = _ref.modalProps,\n      onClose = _ref.onClose,\n      _ref$open = _ref.open,\n      open = _ref$open === void 0 ? false : _ref$open,\n      paperClassNameProp = _ref.paperClassName,\n      paperProps = _ref.paperProps,\n      sliderClassNameProp = _ref.sliderClassName,\n      sliderProps = _ref.sliderProps,\n      otherProps = _objectWithoutProperties(_ref, [\"anchor\", \"children\", \"className\", \"modalClassName\", \"modalProps\", \"onClose\", \"open\", \"paperClassName\", \"paperProps\", \"sliderClassName\", \"sliderProps\"]);\n\n  var isMounted = useIsMounted();\n  var rootClassName = classnames(\"brain-c-drawer\", className);\n  var modalClassName = classnames(\"brain-c-drawer__modal\", modalClassNameProp);\n  var paperClassName = classnames(\"brain-o-paper brain-o-paper--rectangular brain-c-drawer__paper\", \"brain-c-drawer__paper--\".concat(anchor), paperClassNameProp);\n  var sliderClassName = classnames(\"brain-c-drawer__slider\", sliderClassNameProp);\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, otherProps), {}, {\n    className: rootClassName,\n    children: /*#__PURE__*/_jsxDEV(Modal, _objectSpread(_objectSpread({}, modalProps), {}, {\n      className: modalClassName,\n      open: open,\n      onClose: onClose,\n      children: /*#__PURE__*/_jsxDEV(Slide, _objectSpread(_objectSpread({}, sliderProps), {}, {\n        appear: isMounted.current,\n        className: sliderClassName,\n        direction: OPPOSITE_DIRECTIONS[anchor],\n        \"in\": open,\n        children: /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, paperProps), {}, {\n          className: paperClassName,\n          children: children\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Drawer, \"pyk+LM2BHdKDRkrlX0QDpXg3SA0=\", false, function () {\n  return [useIsMounted];\n});\n\n_c = Drawer;\nDrawer.propTypes = {\n  /**\n   * Anchor position to the window\n   */\n  anchor: PropTypes.oneOf(Object.values(DRAWER_ANCHOR)),\n\n  /**\n   * Children component\n   */\n  children: PropTypes.node,\n\n  /**\n   * Additional className for Drawer\n   */\n  className: PropTypes.string,\n\n  /**\n   * Additional className for Modal\n   */\n  modalClassName: PropTypes.string,\n\n  /**\n   * Additional props for Modal\n   */\n  modalProps: PropTypes.shape(Modal.propTypes),\n\n  /**\n   * Close handler\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * If is open\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Additional className for Paper\n   */\n  paperClassName: PropTypes.string,\n\n  /**\n   * Additional props for Paper\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  paperProps: PropTypes.object,\n\n  /**\n   * Additional className for Slider\n   */\n  sliderClassName: PropTypes.string,\n\n  /**\n   * Additional props for Slider\n   */\n  sliderProps: PropTypes.shape(Slide.propTypes)\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Drawer\");","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Drawer.js"],"names":["React","PropTypes","classnames","useIsMounted","Slide","SLIDE_DIRECTION","Modal","DRAWER_ANCHOR","TOP","LEFT","RIGHT","BOTTOM","OPPOSITE_DIRECTIONS","DOWN","UP","Drawer","anchor","children","className","modalClassNameProp","modalClassName","modalProps","onClose","open","paperClassNameProp","paperClassName","paperProps","sliderClassNameProp","sliderClassName","sliderProps","otherProps","isMounted","rootClassName","current","propTypes","oneOf","Object","values","node","string","shape","func","bool","object"],"mappings":";;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,SAASC,YAAT,QAA6B,cAA7B,C,CAEA;;AACA,SAASC,KAAT,EAAgBC,eAAhB,QAAuC,eAAvC;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAO,IAAMC,aAAa,GAAG;AACzBC,EAAAA,GAAG,EAAE,KADoB;AAEzBC,EAAAA,IAAI,EAAE,MAFmB;AAGzBC,EAAAA,KAAK,EAAE,OAHkB;AAIzBC,EAAAA,MAAM,EAAE;AAJiB,CAAtB;AAOP,IAAMC,mBAAmB,qEACpBL,aAAa,CAACE,IADM,EACCJ,eAAe,CAACK,KADjB,yCAEpBH,aAAa,CAACG,KAFM,EAEEL,eAAe,CAACI,IAFlB,yCAGpBF,aAAa,CAACC,GAHM,EAGAH,eAAe,CAACQ,IAHhB,yCAIpBN,aAAa,CAACI,MAJM,EAIGN,eAAe,CAACS,EAJnB,wBAAzB;AAOA,OAAO,SAASC,MAAT,OAaJ;AAAA;;AAAA,yBAZCC,MAYD;AAAA,MAZCA,MAYD,4BAZUT,aAAa,CAACG,KAYxB;AAAA,MAXCO,QAWD,QAXCA,QAWD;AAAA,MAVCC,SAUD,QAVCA,SAUD;AAAA,MATiBC,kBASjB,QATCC,cASD;AAAA,MARCC,UAQD,QARCA,UAQD;AAAA,MAPCC,OAOD,QAPCA,OAOD;AAAA,uBANCC,IAMD;AAAA,MANCA,IAMD,0BANQ,KAMR;AAAA,MALiBC,kBAKjB,QALCC,cAKD;AAAA,MAJCC,UAID,QAJCA,UAID;AAAA,MAHkBC,mBAGlB,QAHCC,eAGD;AAAA,MAFCC,WAED,QAFCA,WAED;AAAA,MADIC,UACJ;;AACC,MAAMC,SAAS,GAAG5B,YAAY,EAA9B;AAEA,MAAM6B,aAAa,GAAG9B,UAAU,CAAC,gBAAD,EAAmBgB,SAAnB,CAAhC;AACA,MAAME,cAAc,GAAGlB,UAAU,CAAC,uBAAD,EAA0BiB,kBAA1B,CAAjC;AACA,MAAMM,cAAc,GAAGvB,UAAU,CAC7B,gEAD6B,mCAEHc,MAFG,GAG7BQ,kBAH6B,CAAjC;AAKA,MAAMI,eAAe,GAAG1B,UAAU,CAAC,wBAAD,EAA2ByB,mBAA3B,CAAlC;AAEA,sBACI,+CAASG,UAAT;AAAqB,IAAA,SAAS,EAAEE,aAAhC;AAAA,2BACI,QAAC,KAAD,kCAAWX,UAAX;AAAuB,MAAA,SAAS,EAAED,cAAlC;AAAkD,MAAA,IAAI,EAAEG,IAAxD;AAA8D,MAAA,OAAO,EAAED,OAAvE;AAAA,6BACI,QAAC,KAAD,kCACQO,WADR;AAEI,QAAA,MAAM,EAAEE,SAAS,CAACE,OAFtB;AAGI,QAAA,SAAS,EAAEL,eAHf;AAII,QAAA,SAAS,EAAEhB,mBAAmB,CAACI,MAAD,CAJlC;AAKI,cAAIO,IALR;AAAA,+BAOI,+CAASG,UAAT;AAAqB,UAAA,SAAS,EAAED,cAAhC;AAAA,oBACKR;AADL;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GA1CeF,M;UAcMZ,Y;;;KAdNY,M;AA4ChBA,MAAM,CAACmB,SAAP,GAAmB;AACf;AACJ;AACA;AACIlB,EAAAA,MAAM,EAAEf,SAAS,CAACkC,KAAV,CAAgBC,MAAM,CAACC,MAAP,CAAc9B,aAAd,CAAhB,CAJO;;AAKf;AACJ;AACA;AACIU,EAAAA,QAAQ,EAAEhB,SAAS,CAACqC,IARL;;AASf;AACJ;AACA;AACIpB,EAAAA,SAAS,EAAEjB,SAAS,CAACsC,MAZN;;AAaf;AACJ;AACA;AACInB,EAAAA,cAAc,EAAEnB,SAAS,CAACsC,MAhBX;;AAiBf;AACJ;AACA;AACIlB,EAAAA,UAAU,EAAEpB,SAAS,CAACuC,KAAV,CAAgBlC,KAAK,CAAC4B,SAAtB,CApBG;;AAqBf;AACJ;AACA;AACIZ,EAAAA,OAAO,EAAErB,SAAS,CAACwC,IAxBJ;;AAyBf;AACJ;AACA;AACIlB,EAAAA,IAAI,EAAEtB,SAAS,CAACyC,IA5BD;;AA6Bf;AACJ;AACA;AACIjB,EAAAA,cAAc,EAAExB,SAAS,CAACsC,MAhCX;;AAiCf;AACJ;AACA;AACI;AACAb,EAAAA,UAAU,EAAEzB,SAAS,CAAC0C,MArCP;;AAsCf;AACJ;AACA;AACIf,EAAAA,eAAe,EAAE3B,SAAS,CAACsC,MAzCZ;;AA0Cf;AACJ;AACA;AACIV,EAAAA,WAAW,EAAE5B,SAAS,CAACuC,KAAV,CAAgBpC,KAAK,CAAC8B,SAAtB;AA7CE,CAAnB","sourcesContent":["// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\n// Utils\nimport { useIsMounted } from \"../../_utils\";\n\n// Components\nimport { Slide, SLIDE_DIRECTION } from \"../animations\";\nimport { Modal } from \"./Modal\";\n\nexport const DRAWER_ANCHOR = {\n    TOP: \"top\",\n    LEFT: \"left\",\n    RIGHT: \"right\",\n    BOTTOM: \"bottom\",\n};\n\nconst OPPOSITE_DIRECTIONS = {\n    [DRAWER_ANCHOR.LEFT]: SLIDE_DIRECTION.RIGHT,\n    [DRAWER_ANCHOR.RIGHT]: SLIDE_DIRECTION.LEFT,\n    [DRAWER_ANCHOR.TOP]: SLIDE_DIRECTION.DOWN,\n    [DRAWER_ANCHOR.BOTTOM]: SLIDE_DIRECTION.UP,\n};\n\nexport function Drawer({\n    anchor = DRAWER_ANCHOR.RIGHT,\n    children,\n    className,\n    modalClassName: modalClassNameProp,\n    modalProps,\n    onClose,\n    open = false,\n    paperClassName: paperClassNameProp,\n    paperProps,\n    sliderClassName: sliderClassNameProp,\n    sliderProps,\n    ...otherProps\n}) {\n    const isMounted = useIsMounted();\n\n    const rootClassName = classnames(\"brain-c-drawer\", className);\n    const modalClassName = classnames(\"brain-c-drawer__modal\", modalClassNameProp);\n    const paperClassName = classnames(\n        \"brain-o-paper brain-o-paper--rectangular brain-c-drawer__paper\",\n        `brain-c-drawer__paper--${anchor}`,\n        paperClassNameProp\n    );\n    const sliderClassName = classnames(\"brain-c-drawer__slider\", sliderClassNameProp);\n\n    return (\n        <div {...otherProps} className={rootClassName}>\n            <Modal {...modalProps} className={modalClassName} open={open} onClose={onClose}>\n                <Slide\n                    {...sliderProps}\n                    appear={isMounted.current}\n                    className={sliderClassName}\n                    direction={OPPOSITE_DIRECTIONS[anchor]}\n                    in={open}\n                >\n                    <div {...paperProps} className={paperClassName}>\n                        {children}\n                    </div>\n                </Slide>\n            </Modal>\n        </div>\n    );\n}\n\nDrawer.propTypes = {\n    /**\n     * Anchor position to the window\n     */\n    anchor: PropTypes.oneOf(Object.values(DRAWER_ANCHOR)),\n    /**\n     * Children component\n     */\n    children: PropTypes.node,\n    /**\n     * Additional className for Drawer\n     */\n    className: PropTypes.string,\n    /**\n     * Additional className for Modal\n     */\n    modalClassName: PropTypes.string,\n    /**\n     * Additional props for Modal\n     */\n    modalProps: PropTypes.shape(Modal.propTypes),\n    /**\n     * Close handler\n     */\n    onClose: PropTypes.func,\n    /**\n     * If is open\n     */\n    open: PropTypes.bool,\n    /**\n     * Additional className for Paper\n     */\n    paperClassName: PropTypes.string,\n    /**\n     * Additional props for Paper\n     */\n    // eslint-disable-next-line react/forbid-prop-types\n    paperProps: PropTypes.object,\n    /**\n     * Additional className for Slider\n     */\n    sliderClassName: PropTypes.string,\n    /**\n     * Additional props for Slider\n     */\n    sliderProps: PropTypes.shape(Slide.propTypes),\n};\n"]},"metadata":{},"sourceType":"module"}