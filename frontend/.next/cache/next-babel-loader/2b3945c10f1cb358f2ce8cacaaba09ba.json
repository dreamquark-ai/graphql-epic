{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Modal.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// Libs\nimport React, { useCallback, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // Utils\n\nimport { createChainedFunction } from \"../../_utils\"; // Components\n\nimport { Overlay } from \"./Overlay\";\nimport { Portal } from \"./Portal\";\n\nfunction getHasTransition(children) {\n  return children ? children.props.hasOwnProperty(\"in\") : false;\n}\n\nexport function Modal(_ref) {\n  let {\n    children,\n    className,\n    disableEscapeKeyDown = false,\n    hideOverlay = false,\n    invisibleOverlay = false,\n    onClose,\n    open = false,\n    overlayClassName: overlayClassNameProp,\n    role = \"presentation\"\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"children\", \"className\", \"disableEscapeKeyDown\", \"hideOverlay\", \"invisibleOverlay\", \"onClose\", \"open\", \"overlayClassName\", \"role\"]);\n\n  const {\n    0: exited,\n    1: setExited\n  } = useState(true);\n  const hasTransition = getHasTransition(children);\n  const rootClassName = classnames(\"brain-c-modal\", {\n    \"brain-c-modal--hidden\": !open && (!hasTransition || exited)\n  }, className);\n  const overlayClassName = classnames(\"brain-c-modal__overlay\", overlayClassNameProp);\n  const contentClassName = classnames(\"brain-c-modal__content\", children === null || children === void 0 ? void 0 : children.props.className);\n\n  const _handleOverlayClick = useCallback(event => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    if (onClose) {\n      onClose(event, \"overlayClick\");\n    }\n  }, [onClose]);\n\n  const _handleKeyDown = useCallback(event => {\n    if (event.key !== \"Escape\") {\n      return;\n    }\n\n    if (!disableEscapeKeyDown) {\n      event.stopPropagation();\n\n      if (onClose) {\n        onClose(event, \"escapeKeyDown\");\n      }\n    }\n  }, [disableEscapeKeyDown, onClose]);\n\n  const childProps = {}; // Hack into child transition to keep Modal open during animation\n\n  if (hasTransition) {\n    var _children$props, _children$props2;\n\n    const _handleEnter = () => {\n      setExited(false);\n    };\n\n    const _handleExited = () => {\n      setExited(true);\n    };\n\n    childProps.onEnter = createChainedFunction(_handleEnter, (_children$props = children.props) === null || _children$props === void 0 ? void 0 : _children$props.onEnter);\n    childProps.onExited = createChainedFunction(_handleExited, (_children$props2 = children.props) === null || _children$props2 === void 0 ? void 0 : _children$props2.onExited);\n  }\n  /*\n   * Marking an element with the role presentation indicates to assistive technology\n   * that this element should be ignored; it exists to support the web application and\n   * is not meant for humans to interact with directly.\n   * https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-static-element-interactions.md\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(Portal, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, otherProps), {}, {\n      className: rootClassName,\n      onKeyDown: _handleKeyDown,\n      role: role,\n      children: [!hideOverlay && /*#__PURE__*/_jsxDEV(Overlay, {\n        className: overlayClassName,\n        invisible: invisibleOverlay,\n        onClick: _handleOverlayClick,\n        open: open\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), children && /*#__PURE__*/React.cloneElement(children, _objectSpread({\n        className: contentClassName\n      }, childProps))]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\nModal.propTypes = {\n  /**\n   * Children element\n   */\n  children: PropTypes.element,\n\n  /**\n   * Additional className to modal\n   */\n  className: PropTypes.string,\n\n  /**\n   * If disables escape listener\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n\n  /**\n   * If overlay is hidden\n   */\n  hideOverlay: PropTypes.bool,\n\n  /**\n   * If overlay is invisible\n   */\n  invisibleOverlay: PropTypes.bool,\n\n  /**\n   * Close handler\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * If is open\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Additional className to overlay\n   */\n  overlayClassName: PropTypes.string,\n\n  /**\n   * Role to display element\n   */\n  role: PropTypes.string\n};","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Modal.js"],"names":["React","useCallback","useState","PropTypes","classnames","createChainedFunction","Overlay","Portal","getHasTransition","children","props","hasOwnProperty","Modal","className","disableEscapeKeyDown","hideOverlay","invisibleOverlay","onClose","open","overlayClassName","overlayClassNameProp","role","otherProps","exited","setExited","hasTransition","rootClassName","contentClassName","_handleOverlayClick","event","target","currentTarget","_handleKeyDown","key","stopPropagation","childProps","_handleEnter","_handleExited","onEnter","onExited","cloneElement","propTypes","element","string","bool","func"],"mappings":"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","sourcesContent":["// Libs\nimport React, { useCallback, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\n// Utils\nimport { createChainedFunction } from \"../../_utils\";\n\n// Components\nimport { Overlay } from \"./Overlay\";\nimport { Portal } from \"./Portal\";\n\nfunction getHasTransition(children) {\n    return children ? children.props.hasOwnProperty(\"in\") : false;\n}\n\nexport function Modal({\n    children,\n    className,\n    disableEscapeKeyDown = false,\n    hideOverlay = false,\n    invisibleOverlay = false,\n    onClose,\n    open = false,\n    overlayClassName: overlayClassNameProp,\n    role = \"presentation\",\n    ...otherProps\n}) {\n    const [exited, setExited] = useState(true);\n    const hasTransition = getHasTransition(children);\n\n    const rootClassName = classnames(\n        \"brain-c-modal\",\n        { \"brain-c-modal--hidden\": !open && (!hasTransition || exited) },\n        className\n    );\n    const overlayClassName = classnames(\"brain-c-modal__overlay\", overlayClassNameProp);\n    const contentClassName = classnames(\"brain-c-modal__content\", children?.props.className);\n\n    const _handleOverlayClick = useCallback(\n        (event) => {\n            if (event.target !== event.currentTarget) {\n                return;\n            }\n\n            if (onClose) {\n                onClose(event, \"overlayClick\");\n            }\n        },\n        [onClose]\n    );\n\n    const _handleKeyDown = useCallback(\n        (event) => {\n            if (event.key !== \"Escape\") {\n                return;\n            }\n\n            if (!disableEscapeKeyDown) {\n                event.stopPropagation();\n\n                if (onClose) {\n                    onClose(event, \"escapeKeyDown\");\n                }\n            }\n        },\n        [disableEscapeKeyDown, onClose]\n    );\n\n    const childProps = {};\n\n    // Hack into child transition to keep Modal open during animation\n    if (hasTransition) {\n        const _handleEnter = () => {\n            setExited(false);\n        };\n\n        const _handleExited = () => {\n            setExited(true);\n        };\n\n        childProps.onEnter = createChainedFunction(_handleEnter, children.props?.onEnter);\n        childProps.onExited = createChainedFunction(_handleExited, children.props?.onExited);\n    }\n\n    /*\n     * Marking an element with the role presentation indicates to assistive technology\n     * that this element should be ignored; it exists to support the web application and\n     * is not meant for humans to interact with directly.\n     * https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-static-element-interactions.md\n     */\n    return (\n        <Portal>\n            {/* The <div> element has a child <role> attribute that allows keyboard interaction */}\n            {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions */}\n            <div {...otherProps} className={rootClassName} onKeyDown={_handleKeyDown} role={role}>\n                {!hideOverlay && (\n                    <Overlay\n                        className={overlayClassName}\n                        invisible={invisibleOverlay}\n                        onClick={_handleOverlayClick}\n                        open={open}\n                    />\n                )}\n                {children && React.cloneElement(children, { className: contentClassName, ...childProps })}\n            </div>\n        </Portal>\n    );\n}\n\nModal.propTypes = {\n    /**\n     * Children element\n     */\n    children: PropTypes.element,\n    /**\n     * Additional className to modal\n     */\n    className: PropTypes.string,\n    /**\n     * If disables escape listener\n     */\n    disableEscapeKeyDown: PropTypes.bool,\n    /**\n     * If overlay is hidden\n     */\n    hideOverlay: PropTypes.bool,\n    /**\n     * If overlay is invisible\n     */\n    invisibleOverlay: PropTypes.bool,\n    /**\n     * Close handler\n     */\n    onClose: PropTypes.func,\n    /**\n     * If is open\n     */\n    open: PropTypes.bool,\n    /**\n     * Additional className to overlay\n     */\n    overlayClassName: PropTypes.string,\n    /**\n     * Role to display element\n     */\n    role: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}