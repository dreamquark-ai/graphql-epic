{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/layout/ThemeContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// Libs\nimport React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nconst ThemeContext = /*#__PURE__*/React.createContext({});\nexport const THEME = {\n  LIGHT: \"light\",\n  DARK: \"dark\",\n  COLOR: \"color\"\n};\nexport function useTheme() {\n  return useContext(ThemeContext);\n}\nexport function ThemeProvider(_ref) {\n  var _ref2;\n\n  let {\n    children,\n    className,\n    theme: themeProp\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"children\", \"className\", \"theme\"]);\n\n  const {\n    theme: themeContext\n  } = useTheme();\n  const theme = (_ref2 = themeProp !== null && themeProp !== void 0 ? themeProp : themeContext) !== null && _ref2 !== void 0 ? _ref2 : THEME.LIGHT;\n  const rootClassName = classnames({\n    \"brain-theme--light\": theme === THEME.LIGHT,\n    \"brain-theme--dark\": theme === THEME.DARK,\n    \"brain-theme--color\": theme === THEME.COLOR\n  }, className);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, otherProps), {}, {\n      className: rootClassName,\n      children: children\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\nThemeProvider.propTypes = {\n  /**\n   * Children to display\n   */\n  children: PropTypes.node,\n\n  /**\n   * Additional className for Theme\n   */\n  className: PropTypes.string,\n\n  /**\n   * Theme value\n   */\n  theme: PropTypes.oneOf(Object.values(THEME))\n};","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/layout/ThemeContext.js"],"names":["React","useContext","PropTypes","classnames","ThemeContext","createContext","THEME","LIGHT","DARK","COLOR","useTheme","ThemeProvider","children","className","theme","themeProp","otherProps","themeContext","rootClassName","propTypes","node","string","oneOf","Object","values"],"mappings":";;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,MAAMC,YAAY,gBAAGJ,KAAK,CAACK,aAAN,CAAoB,EAApB,CAArB;AAEA,OAAO,MAAMC,KAAK,GAAG;AACjBC,EAAAA,KAAK,EAAE,OADU;AAEjBC,EAAAA,IAAI,EAAE,MAFW;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAAd;AAMP,OAAO,SAASC,QAAT,GAAoB;AACvB,SAAOT,UAAU,CAACG,YAAD,CAAjB;AACH;AAED,OAAO,SAASO,aAAT,OAAiF;AAAA;;AAAA,MAA1D;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA,KAAK,EAAEC;AAA9B,GAA0D;AAAA,MAAdC,UAAc;;AACpF,QAAM;AAAEF,IAAAA,KAAK,EAAEG;AAAT,MAA0BP,QAAQ,EAAxC;AAEA,QAAMI,KAAK,YAAGC,SAAH,aAAGA,SAAH,cAAGA,SAAH,GAAgBE,YAAhB,yCAAgCX,KAAK,CAACC,KAAjD;AAEA,QAAMW,aAAa,GAAGf,UAAU,CAC5B;AACI,0BAAsBW,KAAK,KAAKR,KAAK,CAACC,KAD1C;AAEI,yBAAqBO,KAAK,KAAKR,KAAK,CAACE,IAFzC;AAGI,0BAAsBM,KAAK,KAAKR,KAAK,CAACG;AAH1C,GAD4B,EAM5BI,SAN4B,CAAhC;AASA,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KAA9B;AAAA,2BACI,+CAASE,UAAT;AAAqB,MAAA,SAAS,EAAEE,aAAhC;AAAA,gBACKN;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;AAEDD,aAAa,CAACQ,SAAd,GAA0B;AACtB;AACJ;AACA;AACIP,EAAAA,QAAQ,EAAEV,SAAS,CAACkB,IAJE;;AAKtB;AACJ;AACA;AACIP,EAAAA,SAAS,EAAEX,SAAS,CAACmB,MARC;;AAStB;AACJ;AACA;AACIP,EAAAA,KAAK,EAAEZ,SAAS,CAACoB,KAAV,CAAgBC,MAAM,CAACC,MAAP,CAAclB,KAAd,CAAhB;AAZe,CAA1B","sourcesContent":["// Libs\nimport React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nconst ThemeContext = React.createContext({});\n\nexport const THEME = {\n    LIGHT: \"light\",\n    DARK: \"dark\",\n    COLOR: \"color\",\n};\n\nexport function useTheme() {\n    return useContext(ThemeContext);\n}\n\nexport function ThemeProvider({ children, className, theme: themeProp, ...otherProps }) {\n    const { theme: themeContext } = useTheme();\n\n    const theme = themeProp ?? themeContext ?? THEME.LIGHT;\n\n    const rootClassName = classnames(\n        {\n            \"brain-theme--light\": theme === THEME.LIGHT,\n            \"brain-theme--dark\": theme === THEME.DARK,\n            \"brain-theme--color\": theme === THEME.COLOR,\n        },\n        className\n    );\n\n    return (\n        <ThemeContext.Provider value={{ theme }}>\n            <div {...otherProps} className={rootClassName}>\n                {children}\n            </div>\n        </ThemeContext.Provider>\n    );\n}\n\nThemeProvider.propTypes = {\n    /**\n     * Children to display\n     */\n    children: PropTypes.node,\n    /**\n     * Additional className for Theme\n     */\n    className: PropTypes.string,\n    /**\n     * Theme value\n     */\n    theme: PropTypes.oneOf(Object.values(THEME)),\n};\n"]},"metadata":{},"sourceType":"module"}