{"ast":null,"code":"import _defineProperty from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/displays/ChipAction.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { omit } from \"lodash\"; // Components\n\nimport { ICON_SIZE } from \"../icons\";\nimport { Chip, CHIP_TYPES } from \"./Chip\";\nexport function ChipAction(_ref) {\n  var className = _ref.className,\n      _ref$icon = _ref.icon,\n      icon = _ref$icon === void 0 ? \"close\" : _ref$icon,\n      _ref$iconSize = _ref.iconSize,\n      iconSize = _ref$iconSize === void 0 ? ICON_SIZE.M : _ref$iconSize,\n      otherProps = _objectWithoutProperties(_ref, [\"className\", \"icon\", \"iconSize\"]);\n\n  var chipClassName = classnames(\"brain-c-chip--action\", className);\n  return /*#__PURE__*/_jsxDEV(Chip, _objectSpread(_objectSpread({}, otherProps), {}, {\n    className: chipClassName,\n    color: null,\n    icon: icon,\n    iconSize: iconSize,\n    type: CHIP_TYPES.ACTION\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n}\n_c = ChipAction;\nChipAction.propTypes = _objectSpread(_objectSpread({}, omit(Chip.propTypes, [\"color\", \"type\"])), {}, {\n  onClick: PropTypes.func.isRequired\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"ChipAction\");","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/displays/ChipAction.js"],"names":["React","PropTypes","classnames","omit","ICON_SIZE","Chip","CHIP_TYPES","ChipAction","className","icon","iconSize","M","otherProps","chipClassName","ACTION","propTypes","onClick","func","isRequired"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,IAAT,QAAqB,QAArB,C,CAEA;;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,QAAjC;AAEA,OAAO,SAASC,UAAT,OAA0F;AAAA,MAApEC,SAAoE,QAApEA,SAAoE;AAAA,uBAAzDC,IAAyD;AAAA,MAAzDA,IAAyD,0BAAlD,OAAkD;AAAA,2BAAzCC,QAAyC;AAAA,MAAzCA,QAAyC,8BAA9BN,SAAS,CAACO,CAAoB;AAAA,MAAdC,UAAc;;AAC7F,MAAMC,aAAa,GAAGX,UAAU,CAAC,sBAAD,EAAyBM,SAAzB,CAAhC;AAEA,sBACI,QAAC,IAAD,kCACQI,UADR;AAEI,IAAA,SAAS,EAAEC,aAFf;AAGI,IAAA,KAAK,EAAE,IAHX;AAII,IAAA,IAAI,EAAEJ,IAJV;AAKI,IAAA,QAAQ,EAAEC,QALd;AAMI,IAAA,IAAI,EAAEJ,UAAU,CAACQ;AANrB;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;KAbeP,U;AAehBA,UAAU,CAACQ,SAAX,mCACOZ,IAAI,CAACE,IAAI,CAACU,SAAN,EAAiB,CAAC,OAAD,EAAU,MAAV,CAAjB,CADX;AAEIC,EAAAA,OAAO,EAAEf,SAAS,CAACgB,IAAV,CAAeC;AAF5B","sourcesContent":["// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { omit } from \"lodash\";\n\n// Components\nimport { ICON_SIZE } from \"../icons\";\nimport { Chip, CHIP_TYPES } from \"./Chip\";\n\nexport function ChipAction({ className, icon = \"close\", iconSize = ICON_SIZE.M, ...otherProps }) {\n    const chipClassName = classnames(\"brain-c-chip--action\", className);\n\n    return (\n        <Chip\n            {...otherProps}\n            className={chipClassName}\n            color={null}\n            icon={icon}\n            iconSize={iconSize}\n            type={CHIP_TYPES.ACTION}\n        />\n    );\n}\n\nChipAction.propTypes = {\n    ...omit(Chip.propTypes, [\"color\", \"type\"]),\n    onClick: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}