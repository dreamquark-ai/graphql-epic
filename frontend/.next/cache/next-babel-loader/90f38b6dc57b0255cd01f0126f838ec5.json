{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/components/UpdateDataset.js\";\nimport { useMutation, useQuery } from '@apollo/client';\nimport { SINGLE_DATASET_QUERY } from '../graphql/query';\nimport { UPDATE_DATASET_MUTATION } from '../graphql/mutation';\nimport DisplayError from './ErrorMessage';\nimport useForm from '../lib/useForm';\nimport Form from './styles/Form';\nexport default function UpdateProduct({\n  id\n}) {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_DATASET_QUERY, {\n    variables: {\n      id\n    }\n  }); // 2. We need to get the mutation to update the product\n\n  const [updateProduct, {\n    data: updateData,\n    errror: updateError,\n    loading: updateLoading\n  }] = useMutation(UPDATE_DATASET_MUTATION); // 2.5 Create some state for the form inputs:\n\n  const {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  } = useForm((data === null || data === void 0 ? void 0 : data.Product) || {\n    name: '',\n    description: ''\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 23\n  }, this); // 3. We need the form to handle the updates\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: async e => {\n      e.preventDefault();\n      const res = await updateProduct({\n        variables: {\n          id,\n          name: inputs.name,\n          description: inputs.description,\n          price: inputs.price\n        }\n      }).catch(console.error);\n      console.log(res); // Submit the inputfields to the backend:\n      // TODO: Handle Submit!!!\n      // const res = await createProduct();\n      // clearForm();\n      // // Go to that product's page!\n      // Router.push({\n      //   pathname: `/product/${res.data.createProduct.id}`,\n      // });\n    },\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: error || updateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/components/UpdateDataset.js"],"names":["useMutation","useQuery","SINGLE_DATASET_QUERY","UPDATE_DATASET_MUTATION","DisplayError","useForm","Form","UpdateProduct","id","data","error","loading","variables","updateProduct","updateData","errror","updateError","updateLoading","inputs","handleChange","clearForm","resetForm","Product","name","description","e","preventDefault","res","price","catch","console","log"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,uBAAT,QAAwC,qBAAxC;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,eAAe,SAASC,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAA+B;AAC5C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BV,QAAQ,CAACC,oBAAD,EAAuB;AAC9DU,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AADmD,GAAvB,CAAzC,CAD4C,CAI5C;;AACA,QAAM,CACJK,aADI,EAEJ;AAAEJ,IAAAA,IAAI,EAAEK,UAAR;AAAoBC,IAAAA,MAAM,EAAEC,WAA5B;AAAyCL,IAAAA,OAAO,EAAEM;AAAlD,GAFI,IAGFjB,WAAW,CAACG,uBAAD,CAHf,CAL4C,CAS5C;;AACA,QAAM;AAAEe,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAiDhB,OAAO,CAC5D,CAAAI,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEa,OAAN,KAAiB;AACfC,IAAAA,IAAI,EAAE,EADS;AAEfC,IAAAA,WAAW,EAAE;AAFE,GAD2C,CAA9D;AAMA,MAAIb,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CAhB+B,CAiB5C;;AACA,sBACE,QAAC,IAAD;AACE,IAAA,QAAQ,EAAE,MAAOc,CAAP,IAAa;AACrBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,GAAG,GAAG,MAAMd,aAAa,CAAC;AAC9BD,QAAAA,SAAS,EAAE;AACTJ,UAAAA,EADS;AAETe,UAAAA,IAAI,EAAEL,MAAM,CAACK,IAFJ;AAGTC,UAAAA,WAAW,EAAEN,MAAM,CAACM,WAHX;AAITI,UAAAA,KAAK,EAAEV,MAAM,CAACU;AAJL;AADmB,OAAD,CAAb,CAOfC,KAPe,CAOTC,OAAO,CAACpB,KAPC,CAAlB;AAQAoB,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EAVqB,CAWrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KApBH;AAAA,4BAsBE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEjB,KAAK,IAAIM;AAA9B;AAAA;AAAA;AAAA;AAAA,YAtBF,eAuBE;AAAU,MAAA,QAAQ,EAAEC,aAApB;AAAmC,mBAAWA,aAA9C;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA,wCAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,EAAE,EAAC,MAFL;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,WAAW,EAAC,MAJd;AAKE,UAAA,KAAK,EAAEC,MAAM,CAACK,IALhB;AAME,UAAA,QAAQ,EAAEJ;AANZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAYE;AAAO,QAAA,OAAO,EAAC,aAAf;AAAA,+CAEE;AACE,UAAA,EAAE,EAAC,aADL;AAEE,UAAA,IAAI,EAAC,aAFP;AAGE,UAAA,WAAW,EAAC,aAHd;AAIE,UAAA,KAAK,EAAED,MAAM,CAACM,WAJhB;AAKE,UAAA,QAAQ,EAAEL;AALZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,eAuBE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmDD","sourcesContent":["import { useMutation, useQuery } from '@apollo/client'\nimport { SINGLE_DATASET_QUERY } from '../graphql/query'\nimport { UPDATE_DATASET_MUTATION } from '../graphql/mutation'\n\nimport DisplayError from './ErrorMessage'\nimport useForm from '../lib/useForm'\nimport Form from './styles/Form'\n\nexport default function UpdateProduct({ id }) {\n  const { data, error, loading } = useQuery(SINGLE_DATASET_QUERY, {\n    variables: { id },\n  })\n  // 2. We need to get the mutation to update the product\n  const [\n    updateProduct,\n    { data: updateData, errror: updateError, loading: updateLoading },\n  ] = useMutation(UPDATE_DATASET_MUTATION)\n  // 2.5 Create some state for the form inputs:\n  const { inputs, handleChange, clearForm, resetForm } = useForm(\n    data?.Product || {\n      name: '',\n      description: '',\n    }\n  )\n  if (loading) return <p>loading...</p>\n  // 3. We need the form to handle the updates\n  return (\n    <Form\n      onSubmit={async (e) => {\n        e.preventDefault()\n        const res = await updateProduct({\n          variables: {\n            id,\n            name: inputs.name,\n            description: inputs.description,\n            price: inputs.price,\n          },\n        }).catch(console.error)\n        console.log(res)\n        // Submit the inputfields to the backend:\n        // TODO: Handle Submit!!!\n        // const res = await createProduct();\n        // clearForm();\n        // // Go to that product's page!\n        // Router.push({\n        //   pathname: `/product/${res.data.createProduct.id}`,\n        // });\n      }}\n    >\n      <DisplayError error={error || updateError} />\n      <fieldset disabled={updateLoading} aria-busy={updateLoading}>\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            placeholder=\"Name\"\n            value={inputs.name}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"description\">\n          Description\n          <textarea\n            id=\"description\"\n            name=\"description\"\n            placeholder=\"Description\"\n            value={inputs.description}\n            onChange={handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">Update Dataset</button>\n      </fieldset>\n    </Form>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}