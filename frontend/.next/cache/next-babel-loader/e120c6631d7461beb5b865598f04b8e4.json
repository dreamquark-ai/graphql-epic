{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/organisms/cards/ResourceCard.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// Libs\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames'; // Utils\n\nimport { formatDate, formatTime } from '../../_utils'; // Components\n\nimport { ButtonIcon, ButtonAngle } from '../../molecules/buttons';\nimport { Card, CardTitle, CardContent, CardSeparator } from '../../molecules/cards';\nimport { Display, DisplayContainer } from '../../molecules/displays';\nimport { List, ListItem } from '../../molecules/lists';\nexport function ResourceCard(_ref) {\n  let {\n    actionAt,\n    actions = [],\n    actionType,\n    className,\n    owners: ownersProp,\n    properties,\n    title\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"actionAt\", \"actions\", \"actionType\", \"className\", \"owners\", \"properties\", \"title\"]);\n\n  const {\n    0: isActionOpen,\n    1: setActionOpen\n  } = useState(false);\n  const resourceCardClassName = classnames('brain-c-resource-card', className);\n  const owners = Array.isArray(ownersProp) ? ownersProp : [ownersProp];\n  return /*#__PURE__*/_jsxDEV(Card, _objectSpread(_objectSpread({}, otherProps), {}, {\n    className: resourceCardClassName,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"brain-c-resource-card__more-button\",\n      children: /*#__PURE__*/_jsxDEV(ButtonAngle, {\n        onClick: () => setActionOpen(true),\n        children: \"more-h\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), isActionOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"brain-theme--color brain-c-resource-card__action-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"brain-c-resource-card__button-container\",\n        children: /*#__PURE__*/_jsxDEV(ButtonIcon, {\n          className: \"brain-c-resource-card__close-button\",\n          onClick: () => setActionOpen(false),\n          type: \"secondary\",\n          children: \"close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: actions.map(action => {\n          var _action$key;\n\n          return /*#__PURE__*/_jsxDEV(ListItem, {\n            onClick: action.onClick,\n            children: action.label\n          }, (_action$key = action.key) !== null && _action$key !== void 0 ? _action$key : action.label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CardTitle, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      className: \"brain-c-resource-card__secondary-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: `Owned by ${owners.join(', ')}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: `${actionType} on ${formatDate(actionAt)}, ${formatTime(actionAt)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardSeparator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(DisplayContainer, {\n        type: \"horizontal\",\n        children: properties.map(p => {\n          var _p$key;\n\n          return /*#__PURE__*/_jsxDEV(Display, {\n            label: p.label,\n            value: p.value,\n            icon: p.icon\n          }, (_p$key = p.key) !== null && _p$key !== void 0 ? _p$key : p.label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\nResourceCard.propTypes = {\n  /**\n   * Date of action\n   */\n  actionAt: PropTypes.string.isRequired,\n\n  /**\n   * Secondary actions\n   */\n  actions: PropTypes.arrayOf(PropTypes.shape({\n    /**\n     * If is disabled\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Key for react\n     */\n    key: PropTypes.string,\n\n    /**\n     * Action label\n     */\n    label: PropTypes.string.isRequired,\n\n    /**\n     * Action handler\n     */\n    onClick: PropTypes.func.isRequired\n  }).isRequired),\n\n  /**\n   * Action type\n   */\n  actionType: PropTypes.string.isRequired,\n\n  /**\n   * Additional className\n   */\n  className: PropTypes.string,\n\n  /**\n   * List of owners for resource\n   */\n  owners: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /**\n   * Resource properties\n   */\n  properties: PropTypes.arrayOf(PropTypes.shape({\n    /**\n     * Key for react\n     */\n    key: PropTypes.string,\n\n    /**\n     * Label for property\n     */\n    label: PropTypes.string.isRequired,\n\n    /**\n     * Value for property\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\n     * Icon for property\n     */\n    icon: PropTypes.string\n  }).isRequired),\n\n  /**\n   * Title for property\n   */\n  title: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/organisms/cards/ResourceCard.js"],"names":["React","useState","PropTypes","classnames","formatDate","formatTime","ButtonIcon","ButtonAngle","Card","CardTitle","CardContent","CardSeparator","Display","DisplayContainer","List","ListItem","ResourceCard","actionAt","actions","actionType","className","owners","ownersProp","properties","title","otherProps","isActionOpen","setActionOpen","resourceCardClassName","Array","isArray","map","action","onClick","label","key","join","p","value","icon","propTypes","string","isRequired","arrayOf","shape","disabled","bool","func","oneOfType"],"mappings":"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","sourcesContent":["// Libs\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\n// Utils\nimport { formatDate, formatTime } from '../../_utils'\n\n// Components\nimport { ButtonIcon, ButtonAngle } from '../../molecules/buttons'\nimport {\n  Card,\n  CardTitle,\n  CardContent,\n  CardSeparator,\n} from '../../molecules/cards'\nimport { Display, DisplayContainer } from '../../molecules/displays'\nimport { List, ListItem } from '../../molecules/lists'\n\nexport function ResourceCard({\n  actionAt,\n  actions = [],\n  actionType,\n  className,\n  owners: ownersProp,\n  properties,\n  title,\n  ...otherProps\n}) {\n  const [isActionOpen, setActionOpen] = useState(false)\n\n  const resourceCardClassName = classnames('brain-c-resource-card', className)\n\n  const owners = Array.isArray(ownersProp) ? ownersProp : [ownersProp]\n\n  return (\n    <Card {...otherProps} className={resourceCardClassName}>\n      <div className=\"brain-c-resource-card__more-button\">\n        <ButtonAngle onClick={() => setActionOpen(true)}>more-h</ButtonAngle>\n      </div>\n      {isActionOpen && (\n        <div className=\"brain-theme--color brain-c-resource-card__action-menu\">\n          <div className=\"brain-c-resource-card__button-container\">\n            <ButtonIcon\n              className=\"brain-c-resource-card__close-button\"\n              onClick={() => setActionOpen(false)}\n              type=\"secondary\"\n            >\n              close\n            </ButtonIcon>\n          </div>\n          <List>\n            {actions.map((action) => (\n              <ListItem\n                key={action.key ?? action.label}\n                onClick={action.onClick}\n              >\n                {action.label}\n              </ListItem>\n            ))}\n          </List>\n        </div>\n      )}\n      <CardTitle>{title}</CardTitle>\n      <CardContent className=\"brain-c-resource-card__secondary-text\">\n        <div>{`Owned by ${owners.join(', ')}`}</div>\n        <div>{`${actionType} on ${formatDate(actionAt)}, ${formatTime(\n          actionAt\n        )}`}</div>\n      </CardContent>\n      <CardSeparator />\n      <CardContent>\n        <DisplayContainer type=\"horizontal\">\n          {properties.map((p) => (\n            <Display\n              key={p.key ?? p.label}\n              label={p.label}\n              value={p.value}\n              icon={p.icon}\n            />\n          ))}\n        </DisplayContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nResourceCard.propTypes = {\n  /**\n   * Date of action\n   */\n  actionAt: PropTypes.string.isRequired,\n  /**\n   * Secondary actions\n   */\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      /**\n       * If is disabled\n       */\n      disabled: PropTypes.bool,\n      /**\n       * Key for react\n       */\n      key: PropTypes.string,\n      /**\n       * Action label\n       */\n      label: PropTypes.string.isRequired,\n      /**\n       * Action handler\n       */\n      onClick: PropTypes.func.isRequired,\n    }).isRequired\n  ),\n  /**\n   * Action type\n   */\n  actionType: PropTypes.string.isRequired,\n  /**\n   * Additional className\n   */\n  className: PropTypes.string,\n  /**\n   * List of owners for resource\n   */\n  owners: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  /**\n   * Resource properties\n   */\n  properties: PropTypes.arrayOf(\n    PropTypes.shape({\n      /**\n       * Key for react\n       */\n      key: PropTypes.string,\n      /**\n       * Label for property\n       */\n      label: PropTypes.string.isRequired,\n      /**\n       * Value for property\n       */\n      value: PropTypes.string.isRequired,\n      /**\n       * Icon for property\n       */\n      icon: PropTypes.string,\n    }).isRequired\n  ),\n  /**\n   * Title for property\n   */\n  title: PropTypes.string.isRequired,\n}\n"]},"metadata":{},"sourceType":"module"}