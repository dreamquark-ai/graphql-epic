{"ast":null,"code":"import _defineProperty from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Banner.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // Utils\n\nimport { useIsMounted, getCSSVariable, alterElement } from \"../../_utils\"; // Components\n\nimport { Slide } from \"../animations\";\nimport { Modal } from \"./Modal\";\nexport function Banner(_ref) {\n  _s();\n\n  var children = _ref.children,\n      className = _ref.className,\n      _ref$color = _ref.color,\n      colorProp = _ref$color === void 0 ? \"--brain-color--blue-100\" : _ref$color,\n      modalClassNameProp = _ref.modalClassName,\n      modalProps = _ref.modalProps,\n      onClose = _ref.onClose,\n      _ref$open = _ref.open,\n      open = _ref$open === void 0 ? false : _ref$open,\n      paperClassNameProp = _ref.paperClassName,\n      paperProps = _ref.paperProps,\n      slideClassNameProp = _ref.slideClassName,\n      slideProps = _ref.slideProps,\n      otherProps = _objectWithoutProperties(_ref, [\"children\", \"className\", \"color\", \"modalClassName\", \"modalProps\", \"onClose\", \"open\", \"paperClassName\", \"paperProps\", \"slideClassName\", \"slideProps\"]);\n\n  var rootClassName = classnames(\"brain-theme--color brain-c-banner\", className);\n  var modalClassName = classnames(\"brain-c-banner__modal\", modalClassNameProp);\n  var paperClassName = classnames(\"brain-c-banner__paper\", paperClassNameProp);\n  var slideClassName = classnames(\"brain-c-banner__slide\", slideClassNameProp);\n  var isMounted = useIsMounted();\n  var color = colorProp.startsWith(\"--brain\") ? getCSSVariable(colorProp) : colorProp;\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, otherProps), {}, {\n    className: rootClassName,\n    children: /*#__PURE__*/_jsxDEV(Modal, _objectSpread(_objectSpread({}, modalProps), {}, {\n      className: modalClassName,\n      onClose: onClose,\n      open: open,\n      children: /*#__PURE__*/_jsxDEV(Slide, _objectSpread(_objectSpread({}, slideProps), {}, {\n        appear: isMounted.current,\n        className: slideClassName,\n        direction: \"down\",\n        \"in\": open,\n        children: /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, paperProps), {}, {\n          className: paperClassName,\n          style: {\n            backgroundColor: color\n          },\n          children: React.Children.map(children, function (child) {\n            return alterElement(child, {\n              className: \"brain-c-banner__child\"\n            });\n          })\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Banner, \"pyk+LM2BHdKDRkrlX0QDpXg3SA0=\", false, function () {\n  return [useIsMounted];\n});\n\n_c = Banner;\nBanner.propTypes = {\n  /**\n   * Children to display\n   */\n  children: PropTypes.node,\n\n  /**\n   * Additional className\n   */\n  className: PropTypes.string,\n\n  /**\n   * Color value or name for color\n   */\n  color: PropTypes.string,\n\n  /**\n   * Additional className for Modal\n   */\n  modalClassName: PropTypes.string,\n\n  /**\n   * Additional props for Modal\n   */\n  modalProps: PropTypes.shape(Modal.propTypes),\n\n  /**\n   * Close handler\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * If is open\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Additional className for Paper\n   */\n  paperClassName: PropTypes.string,\n\n  /**\n   * Additional props for Paper\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  paperProps: PropTypes.object,\n\n  /**\n   * Additional className for Slide\n   */\n  slideClassName: PropTypes.string,\n\n  /**\n   * Additional props for Slide\n   */\n  slideProps: PropTypes.shape(Slide.propTypes)\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Banner.js"],"names":["React","PropTypes","classnames","useIsMounted","getCSSVariable","alterElement","Slide","Modal","Banner","children","className","color","colorProp","modalClassNameProp","modalClassName","modalProps","onClose","open","paperClassNameProp","paperClassName","paperProps","slideClassNameProp","slideClassName","slideProps","otherProps","rootClassName","isMounted","startsWith","current","backgroundColor","Children","map","child","propTypes","node","string","shape","func","bool","object"],"mappings":"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","sourcesContent":["// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\n// Utils\nimport { useIsMounted, getCSSVariable, alterElement } from \"../../_utils\";\n\n// Components\nimport { Slide } from \"../animations\";\nimport { Modal } from \"./Modal\";\n\nexport function Banner({\n    children,\n    className,\n    color: colorProp = \"--brain-color--blue-100\",\n    modalClassName: modalClassNameProp,\n    modalProps,\n    onClose,\n    open = false,\n    paperClassName: paperClassNameProp,\n    paperProps,\n    slideClassName: slideClassNameProp,\n    slideProps,\n    ...otherProps\n}) {\n    const rootClassName = classnames(\"brain-theme--color brain-c-banner\", className);\n    const modalClassName = classnames(\"brain-c-banner__modal\", modalClassNameProp);\n    const paperClassName = classnames(\"brain-c-banner__paper\", paperClassNameProp);\n    const slideClassName = classnames(\"brain-c-banner__slide\", slideClassNameProp);\n\n    const isMounted = useIsMounted();\n\n    const color = colorProp.startsWith(\"--brain\") ? getCSSVariable(colorProp) : colorProp;\n\n    return (\n        <div {...otherProps} className={rootClassName}>\n            <Modal {...modalProps} className={modalClassName} onClose={onClose} open={open}>\n                <Slide {...slideProps} appear={isMounted.current} className={slideClassName} direction=\"down\" in={open}>\n                    <div {...paperProps} className={paperClassName} style={{ backgroundColor: color }}>\n                        {React.Children.map(children, (child) =>\n                            alterElement(child, { className: \"brain-c-banner__child\" })\n                        )}\n                    </div>\n                </Slide>\n            </Modal>\n        </div>\n    );\n}\n\nBanner.propTypes = {\n    /**\n     * Children to display\n     */\n    children: PropTypes.node,\n    /**\n     * Additional className\n     */\n    className: PropTypes.string,\n    /**\n     * Color value or name for color\n     */\n    color: PropTypes.string,\n    /**\n     * Additional className for Modal\n     */\n    modalClassName: PropTypes.string,\n    /**\n     * Additional props for Modal\n     */\n    modalProps: PropTypes.shape(Modal.propTypes),\n    /**\n     * Close handler\n     */\n    onClose: PropTypes.func,\n    /**\n     * If is open\n     */\n    open: PropTypes.bool,\n    /**\n     * Additional className for Paper\n     */\n    paperClassName: PropTypes.string,\n    /**\n     * Additional props for Paper\n     */\n    // eslint-disable-next-line react/forbid-prop-types\n    paperProps: PropTypes.object,\n    /**\n     * Additional className for Slide\n     */\n    slideClassName: PropTypes.string,\n    /**\n     * Additional props for Slide\n     */\n    slideProps: PropTypes.shape(Slide.propTypes),\n};\n"]},"metadata":{},"sourceType":"module"}