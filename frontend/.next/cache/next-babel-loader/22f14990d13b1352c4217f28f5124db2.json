{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Drawer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // Utils\n\nimport { useIsMounted } from \"../../_utils\"; // Components\n\nimport { Slide, SLIDE_DIRECTION } from \"../animations\";\nimport { Modal } from \"./Modal\";\nexport const DRAWER_ANCHOR = {\n  TOP: \"top\",\n  LEFT: \"left\",\n  RIGHT: \"right\",\n  BOTTOM: \"bottom\"\n};\nconst OPPOSITE_DIRECTIONS = {\n  [DRAWER_ANCHOR.LEFT]: SLIDE_DIRECTION.RIGHT,\n  [DRAWER_ANCHOR.RIGHT]: SLIDE_DIRECTION.LEFT,\n  [DRAWER_ANCHOR.TOP]: SLIDE_DIRECTION.DOWN,\n  [DRAWER_ANCHOR.BOTTOM]: SLIDE_DIRECTION.UP\n};\nexport function Drawer(_ref) {\n  let {\n    anchor = DRAWER_ANCHOR.RIGHT,\n    children,\n    className,\n    modalClassName: modalClassNameProp,\n    modalProps,\n    onClose,\n    open = false,\n    paperClassName: paperClassNameProp,\n    paperProps,\n    sliderClassName: sliderClassNameProp,\n    sliderProps\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"anchor\", \"children\", \"className\", \"modalClassName\", \"modalProps\", \"onClose\", \"open\", \"paperClassName\", \"paperProps\", \"sliderClassName\", \"sliderProps\"]);\n\n  const isMounted = useIsMounted();\n  const rootClassName = classnames(\"brain-c-drawer\", className);\n  const modalClassName = classnames(\"brain-c-drawer__modal\", modalClassNameProp);\n  const paperClassName = classnames(\"brain-o-paper brain-o-paper--rectangular brain-c-drawer__paper\", `brain-c-drawer__paper--${anchor}`, paperClassNameProp);\n  const sliderClassName = classnames(\"brain-c-drawer__slider\", sliderClassNameProp);\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, otherProps), {}, {\n    className: rootClassName,\n    children: /*#__PURE__*/_jsxDEV(Modal, _objectSpread(_objectSpread({}, modalProps), {}, {\n      className: modalClassName,\n      open: open,\n      onClose: onClose,\n      children: /*#__PURE__*/_jsxDEV(Slide, _objectSpread(_objectSpread({}, sliderProps), {}, {\n        appear: isMounted.current,\n        className: sliderClassName,\n        direction: OPPOSITE_DIRECTIONS[anchor],\n        in: open,\n        children: /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, paperProps), {}, {\n          className: paperClassName,\n          children: children\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\nDrawer.propTypes = {\n  /**\n   * Anchor position to the window\n   */\n  anchor: PropTypes.oneOf(Object.values(DRAWER_ANCHOR)),\n\n  /**\n   * Children component\n   */\n  children: PropTypes.node,\n\n  /**\n   * Additional className for Drawer\n   */\n  className: PropTypes.string,\n\n  /**\n   * Additional className for Modal\n   */\n  modalClassName: PropTypes.string,\n\n  /**\n   * Additional props for Modal\n   */\n  modalProps: PropTypes.shape(Modal.propTypes),\n\n  /**\n   * Close handler\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * If is open\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Additional className for Paper\n   */\n  paperClassName: PropTypes.string,\n\n  /**\n   * Additional props for Paper\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  paperProps: PropTypes.object,\n\n  /**\n   * Additional className for Slider\n   */\n  sliderClassName: PropTypes.string,\n\n  /**\n   * Additional props for Slider\n   */\n  sliderProps: PropTypes.shape(Slide.propTypes)\n};","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Drawer.js"],"names":["React","PropTypes","classnames","useIsMounted","Slide","SLIDE_DIRECTION","Modal","DRAWER_ANCHOR","TOP","LEFT","RIGHT","BOTTOM","OPPOSITE_DIRECTIONS","DOWN","UP","Drawer","anchor","children","className","modalClassName","modalClassNameProp","modalProps","onClose","open","paperClassName","paperClassNameProp","paperProps","sliderClassName","sliderClassNameProp","sliderProps","otherProps","isMounted","rootClassName","current","propTypes","oneOf","Object","values","node","string","shape","func","bool","object"],"mappings":"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","sourcesContent":["// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\n// Utils\nimport { useIsMounted } from \"../../_utils\";\n\n// Components\nimport { Slide, SLIDE_DIRECTION } from \"../animations\";\nimport { Modal } from \"./Modal\";\n\nexport const DRAWER_ANCHOR = {\n    TOP: \"top\",\n    LEFT: \"left\",\n    RIGHT: \"right\",\n    BOTTOM: \"bottom\",\n};\n\nconst OPPOSITE_DIRECTIONS = {\n    [DRAWER_ANCHOR.LEFT]: SLIDE_DIRECTION.RIGHT,\n    [DRAWER_ANCHOR.RIGHT]: SLIDE_DIRECTION.LEFT,\n    [DRAWER_ANCHOR.TOP]: SLIDE_DIRECTION.DOWN,\n    [DRAWER_ANCHOR.BOTTOM]: SLIDE_DIRECTION.UP,\n};\n\nexport function Drawer({\n    anchor = DRAWER_ANCHOR.RIGHT,\n    children,\n    className,\n    modalClassName: modalClassNameProp,\n    modalProps,\n    onClose,\n    open = false,\n    paperClassName: paperClassNameProp,\n    paperProps,\n    sliderClassName: sliderClassNameProp,\n    sliderProps,\n    ...otherProps\n}) {\n    const isMounted = useIsMounted();\n\n    const rootClassName = classnames(\"brain-c-drawer\", className);\n    const modalClassName = classnames(\"brain-c-drawer__modal\", modalClassNameProp);\n    const paperClassName = classnames(\n        \"brain-o-paper brain-o-paper--rectangular brain-c-drawer__paper\",\n        `brain-c-drawer__paper--${anchor}`,\n        paperClassNameProp\n    );\n    const sliderClassName = classnames(\"brain-c-drawer__slider\", sliderClassNameProp);\n\n    return (\n        <div {...otherProps} className={rootClassName}>\n            <Modal {...modalProps} className={modalClassName} open={open} onClose={onClose}>\n                <Slide\n                    {...sliderProps}\n                    appear={isMounted.current}\n                    className={sliderClassName}\n                    direction={OPPOSITE_DIRECTIONS[anchor]}\n                    in={open}\n                >\n                    <div {...paperProps} className={paperClassName}>\n                        {children}\n                    </div>\n                </Slide>\n            </Modal>\n        </div>\n    );\n}\n\nDrawer.propTypes = {\n    /**\n     * Anchor position to the window\n     */\n    anchor: PropTypes.oneOf(Object.values(DRAWER_ANCHOR)),\n    /**\n     * Children component\n     */\n    children: PropTypes.node,\n    /**\n     * Additional className for Drawer\n     */\n    className: PropTypes.string,\n    /**\n     * Additional className for Modal\n     */\n    modalClassName: PropTypes.string,\n    /**\n     * Additional props for Modal\n     */\n    modalProps: PropTypes.shape(Modal.propTypes),\n    /**\n     * Close handler\n     */\n    onClose: PropTypes.func,\n    /**\n     * If is open\n     */\n    open: PropTypes.bool,\n    /**\n     * Additional className for Paper\n     */\n    paperClassName: PropTypes.string,\n    /**\n     * Additional props for Paper\n     */\n    // eslint-disable-next-line react/forbid-prop-types\n    paperProps: PropTypes.object,\n    /**\n     * Additional className for Slider\n     */\n    sliderClassName: PropTypes.string,\n    /**\n     * Additional props for Slider\n     */\n    sliderProps: PropTypes.shape(Slide.propTypes),\n};\n"]},"metadata":{},"sourceType":"module"}