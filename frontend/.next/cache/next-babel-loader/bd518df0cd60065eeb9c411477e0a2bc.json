{"ast":null,"code":"import _defineProperty from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/displays/ChipContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // Components\n\nimport { Chip } from \"./Chip\";\nimport { ChipAction } from \"./ChipAction\";\nexport function ChipContainer(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      otherProps = _objectWithoutProperties(_ref, [\"children\", \"className\"]);\n\n  var containerClassName = classnames(\"brain-c-chip-container\", className);\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n    className: containerClassName\n  }, otherProps), {}, {\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_c = ChipContainer;\nChipContainer.propTypes = {\n  /**\n   * Children chips\n   */\n  children: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.instanceOf(Chip), PropTypes.instanceOf(ChipAction)])),\n\n  /**\n   * Additional className for container\n   */\n  className: PropTypes.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ChipContainer\");","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/displays/ChipContainer.js"],"names":["React","PropTypes","classnames","Chip","ChipAction","ChipContainer","children","className","otherProps","containerClassName","propTypes","arrayOf","oneOfType","instanceOf","string"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,SAASC,aAAT,OAA+D;AAAA,MAAtCC,QAAsC,QAAtCA,QAAsC;AAAA,MAA5BC,SAA4B,QAA5BA,SAA4B;AAAA,MAAdC,UAAc;;AAClE,MAAMC,kBAAkB,GAAGP,UAAU,CAAC,wBAAD,EAA2BK,SAA3B,CAArC;AAEA,sBACI;AAAK,IAAA,SAAS,EAAEE;AAAhB,KAAwCD,UAAxC;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KAReD,a;AAUhBA,aAAa,CAACK,SAAd,GAA0B;AACtB;AACJ;AACA;AACIJ,EAAAA,QAAQ,EAAEL,SAAS,CAACU,OAAV,CAAkBV,SAAS,CAACW,SAAV,CAAoB,CAACX,SAAS,CAACY,UAAV,CAAqBV,IAArB,CAAD,EAA6BF,SAAS,CAACY,UAAV,CAAqBT,UAArB,CAA7B,CAApB,CAAlB,CAJY;;AAKtB;AACJ;AACA;AACIG,EAAAA,SAAS,EAAEN,SAAS,CAACa;AARC,CAA1B","sourcesContent":["// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\n// Components\nimport { Chip } from \"./Chip\";\nimport { ChipAction } from \"./ChipAction\";\n\nexport function ChipContainer({ children, className, ...otherProps }) {\n    const containerClassName = classnames(\"brain-c-chip-container\", className);\n\n    return (\n        <div className={containerClassName} {...otherProps}>\n            {children}\n        </div>\n    );\n}\n\nChipContainer.propTypes = {\n    /**\n     * Children chips\n     */\n    children: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.instanceOf(Chip), PropTypes.instanceOf(ChipAction)])),\n    /**\n     * Additional className for container\n     */\n    className: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}