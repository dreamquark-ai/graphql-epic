{"ast":null,"code":"import _defineProperty from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Dialog.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Libs\nimport React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // Components\n\nimport { Card } from \"../cards/Card\";\nimport { CardTitle } from \"../cards/CardTitle\";\nimport { CardContent } from \"../cards/CardContent\";\nimport { Modal } from \"./Modal\";\nimport { CardActions } from \"../cards/CardActions\";\nimport { Button } from \"../buttons\";\nexport function Dialog(_ref) {\n  _s();\n\n  var _this = this;\n\n  var actionsProp = _ref.actions,\n      _ref$cancelText = _ref.cancelText,\n      cancelText = _ref$cancelText === void 0 ? \"CANCEL\" : _ref$cancelText,\n      cardClassNameProp = _ref.cardClassName,\n      cardProps = _ref.cardProps,\n      children = _ref.children,\n      className = _ref.className,\n      cardContentClassNameProp = _ref.cardContentClassName,\n      _ref$hasCancel = _ref.hasCancel,\n      hasCancel = _ref$hasCancel === void 0 ? true : _ref$hasCancel,\n      modalClassNameProp = _ref.modalClassName,\n      modalProps = _ref.modalProps,\n      open = _ref.open,\n      onClose = _ref.onClose,\n      title = _ref.title,\n      otherProps = _objectWithoutProperties(_ref, [\"actions\", \"cancelText\", \"cardClassName\", \"cardProps\", \"children\", \"className\", \"cardContentClassName\", \"hasCancel\", \"modalClassName\", \"modalProps\", \"open\", \"onClose\", \"title\"]);\n\n  var dialogClassName = classnames(\"brain-c-dialog\", className);\n  var modalClassName = classnames(\"brain-c-dialog__modal\", modalClassNameProp);\n  var cardClassName = classnames(\"brain-c-dialog__card\", cardClassNameProp);\n  var cardContentClassName = classnames(\"brain-c-dialog__card-content\", cardContentClassNameProp);\n  var actions = useMemo(function () {\n    return [hasCancel && /*#__PURE__*/_jsxDEV(Button, {\n      type: \"secondary\",\n      onClick: onClose,\n      children: cancelText\n    }, \"cancel\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }, _this)].concat(_toConsumableArray(Array.isArray(actionsProp) ? actionsProp : [actionsProp])).filter(Boolean);\n  }, [actionsProp, hasCancel, cancelText, onClose]);\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, otherProps), {}, {\n    className: dialogClassName,\n    children: /*#__PURE__*/_jsxDEV(Modal, _objectSpread(_objectSpread({}, modalProps), {}, {\n      className: modalClassName,\n      onClose: onClose,\n      open: open,\n      children: /*#__PURE__*/_jsxDEV(Card, _objectSpread(_objectSpread({}, cardProps), {}, {\n        className: cardClassName,\n        children: [title && /*#__PURE__*/_jsxDEV(CardTitle, {\n          title: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          className: cardContentClassName,\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n          children: actions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }), void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dialog, \"ntwMcOONFPPyOkEmU0OR9Bc1fRg=\");\n\n_c = Dialog;\nDialog.propTypes = {\n  /**\n   *  actionsAdornment: Button actions of the dialog\n   */\n  actionsAdornment: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n\n  /**\n   *   cancelText: Text fot the cancel button in the actions\n   */\n  cancelText: PropTypes.string,\n\n  /**\n   *  Additional className for Card\n   */\n  cardClassName: PropTypes.string,\n\n  /**\n   * Additional props for Card\n   */\n  cardProps: PropTypes.shape(Card.propTypes),\n\n  /**\n   *  Content of the dialog\n   */\n  children: PropTypes.node,\n\n  /**\n   *  Additional className for Dialog\n   */\n  className: PropTypes.string,\n\n  /**\n   *  Additional className for the content\n   */\n  contentClassName: PropTypes.string,\n\n  /**\n   *  Boolean to display the cancel action button\n   */\n  hasCancel: PropTypes.bool,\n\n  /**\n   *  Additional className for Modal\n   */\n  modalClassName: PropTypes.string,\n\n  /**\n   *  Props for Modal\n   */\n  modalProps: PropTypes.shape(Modal.propTypes),\n\n  /**\n   *  onClose function for close the dialog\n   */\n  onClose: PropTypes.func,\n\n  /**\n   *  Boolean to manage the dialog\n   */\n  open: PropTypes.bool,\n\n  /**\n   *  Title of the card of the dialog\n   */\n  title: PropTypes.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Dialog\");","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/modals/Dialog.js"],"names":["React","useMemo","PropTypes","classnames","Card","CardTitle","CardContent","Modal","CardActions","Button","Dialog","actionsProp","actions","cancelText","cardClassNameProp","cardClassName","cardProps","children","className","cardContentClassNameProp","cardContentClassName","hasCancel","modalClassNameProp","modalClassName","modalProps","open","onClose","title","otherProps","dialogClassName","Array","isArray","filter","Boolean","propTypes","actionsAdornment","oneOfType","element","arrayOf","string","shape","node","contentClassName","bool","func"],"mappings":"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","sourcesContent":["// Libs\nimport React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\n// Components\nimport { Card } from \"../cards/Card\";\nimport { CardTitle } from \"../cards/CardTitle\";\nimport { CardContent } from \"../cards/CardContent\";\nimport { Modal } from \"./Modal\";\nimport { CardActions } from \"../cards/CardActions\";\nimport { Button } from \"../buttons\";\n\nexport function Dialog({\n    actions: actionsProp,\n    cancelText = \"CANCEL\",\n    cardClassName: cardClassNameProp,\n    cardProps,\n    children,\n    className,\n    cardContentClassName: cardContentClassNameProp,\n    hasCancel = true,\n    modalClassName: modalClassNameProp,\n    modalProps,\n    open,\n    onClose,\n    title,\n    ...otherProps\n}) {\n    const dialogClassName = classnames(\"brain-c-dialog\", className);\n    const modalClassName = classnames(\"brain-c-dialog__modal\", modalClassNameProp);\n    const cardClassName = classnames(\"brain-c-dialog__card\", cardClassNameProp);\n    const cardContentClassName = classnames(\"brain-c-dialog__card-content\", cardContentClassNameProp);\n\n    const actions = useMemo(\n        () =>\n            [\n                hasCancel && (\n                    <Button key=\"cancel\" type=\"secondary\" onClick={onClose}>\n                        {cancelText}\n                    </Button>\n                ),\n                ...(Array.isArray(actionsProp) ? actionsProp : [actionsProp]),\n            ].filter(Boolean),\n        [actionsProp, hasCancel, cancelText, onClose]\n    );\n\n    return (\n        <div {...otherProps} className={dialogClassName}>\n            <Modal {...modalProps} className={modalClassName} onClose={onClose} open={open}>\n                <Card {...cardProps} className={cardClassName}>\n                    {title && <CardTitle title={title} />}\n                    <CardContent className={cardContentClassName}>{children}</CardContent>\n                    <CardActions>{actions}</CardActions>\n                </Card>\n            </Modal>\n        </div>\n    );\n}\n\nDialog.propTypes = {\n    /**\n     *  actionsAdornment: Button actions of the dialog\n     */\n    actionsAdornment: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n    /**\n     *   cancelText: Text fot the cancel button in the actions\n     */\n    cancelText: PropTypes.string,\n    /**\n     *  Additional className for Card\n     */\n    cardClassName: PropTypes.string,\n    /**\n     * Additional props for Card\n     */\n    cardProps: PropTypes.shape(Card.propTypes),\n    /**\n     *  Content of the dialog\n     */\n    children: PropTypes.node,\n    /**\n     *  Additional className for Dialog\n     */\n    className: PropTypes.string,\n    /**\n     *  Additional className for the content\n     */\n    contentClassName: PropTypes.string,\n    /**\n     *  Boolean to display the cancel action button\n     */\n    hasCancel: PropTypes.bool,\n    /**\n     *  Additional className for Modal\n     */\n    modalClassName: PropTypes.string,\n    /**\n     *  Props for Modal\n     */\n    modalProps: PropTypes.shape(Modal.propTypes),\n    /**\n     *  onClose function for close the dialog\n     */\n    onClose: PropTypes.func,\n    /**\n     *  Boolean to manage the dialog\n     */\n    open: PropTypes.bool,\n    /**\n     *  Title of the card of the dialog\n     */\n    title: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}