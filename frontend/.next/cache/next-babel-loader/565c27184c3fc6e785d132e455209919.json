{"ast":null,"code":"import _defineProperty from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/buttons/ButtonIcon.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Libs\nimport React from \"react\";\nimport classnames from \"classnames\"; // Components\n\nimport { Icon, ICON_SIZE } from \"../icons\";\nimport { Button } from \"./Button\";\nexport var ButtonIcon = /*#__PURE__*/React.forwardRef(_c = function _c(_ref, ref) {\n  var className = _ref.className,\n      icon = _ref.icon,\n      children = _ref.children,\n      otherProps = _objectWithoutProperties(_ref, [\"className\", \"icon\", \"children\"]);\n\n  var buttonClassName = classnames(\"brain-c-button-icon\", className);\n  var child = icon !== null && icon !== void 0 ? icon : children;\n  return /*#__PURE__*/_jsxDEV(Button, _objectSpread(_objectSpread({}, otherProps), {}, {\n    className: buttonClassName,\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(Icon, {\n      size: ICON_SIZE.M,\n      children: child\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, _this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, _this);\n});\n_c2 = ButtonIcon;\nButtonIcon.displayName = \"ButtonIcon\";\nButtonIcon.propTypes = _objectSpread({}, Button.propTypes);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ButtonIcon$React.forwardRef\");\n$RefreshReg$(_c2, \"ButtonIcon\");","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/buttons/ButtonIcon.js"],"names":["React","classnames","Icon","ICON_SIZE","Button","ButtonIcon","forwardRef","ref","className","icon","children","otherProps","buttonClassName","child","M","displayName","propTypes"],"mappings":";;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,UAAhC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,OAAO,IAAMC,UAAU,gBAAGL,KAAK,CAACM,UAAN,MAAiB,kBAA+CC,GAA/C,EAAuD;AAAA,MAApDC,SAAoD,QAApDA,SAAoD;AAAA,MAAzCC,IAAyC,QAAzCA,IAAyC;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;AAAA,MAAtBC,UAAsB;;AAC9F,MAAMC,eAAe,GAAGX,UAAU,CAAC,qBAAD,EAAwBO,SAAxB,CAAlC;AACA,MAAMK,KAAK,GAAGJ,IAAH,aAAGA,IAAH,cAAGA,IAAH,GAAWC,QAAtB;AAEA,sBACI,QAAC,MAAD,kCAAYC,UAAZ;AAAwB,IAAA,SAAS,EAAEC,eAAnC;AAAoD,IAAA,GAAG,EAAEL,GAAzD;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEJ,SAAS,CAACW,CAAtB;AAAA,gBAA0BD;AAA1B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAKH,CATyB,CAAnB;MAAMR,U;AAWbA,UAAU,CAACU,WAAX,GAAyB,YAAzB;AAEAV,UAAU,CAACW,SAAX,qBACOZ,MAAM,CAACY,SADd","sourcesContent":["// Libs\nimport React from \"react\";\nimport classnames from \"classnames\";\n\n// Components\nimport { Icon, ICON_SIZE } from \"../icons\";\nimport { Button } from \"./Button\";\n\nexport const ButtonIcon = React.forwardRef(({ className, icon, children, ...otherProps }, ref) => {\n    const buttonClassName = classnames(\"brain-c-button-icon\", className);\n    const child = icon ?? children;\n\n    return (\n        <Button {...otherProps} className={buttonClassName} ref={ref}>\n            <Icon size={ICON_SIZE.M}>{child}</Icon>\n        </Button>\n    );\n});\n\nButtonIcon.displayName = \"ButtonIcon\";\n\nButtonIcon.propTypes = {\n    ...Button.propTypes,\n};\n"]},"metadata":{},"sourceType":"module"}