{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/new_components/molecules/displays/Chip.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // Utils\n\nimport { getCSSVariable, wrapLabel } from \"../../_utils\"; // Components\n\nimport { IconWrapper, ICON_SIZE, ICON_POSITION } from \"../icons\";\nexport { ICON_SIZE as CHIP_ICON_SIZE, ICON_POSITION as CHIP_ICON_POSITION };\nexport const CHIP_TYPES = {\n  COLORED: \"colored\",\n  OUTLINED: \"outlined\",\n  ACTION: \"action\"\n};\nexport function Chip(_ref) {\n  let {\n    children,\n    className,\n    color: colorProp = \"--brain-color--blue-100\",\n    disabled = false,\n    icon,\n    iconClassName: iconClassNameProp,\n    iconPosition = ICON_POSITION.RIGHT,\n    iconProps,\n    iconSize = ICON_SIZE.XS,\n    label,\n    onClick,\n    type = CHIP_TYPES.COLORED\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"children\", \"className\", \"color\", \"disabled\", \"icon\", \"iconClassName\", \"iconPosition\", \"iconProps\", \"iconSize\", \"label\", \"onClick\", \"type\"]);\n\n  const chipClassName = classnames({\n    \"brain-theme--color\": !disabled && type === CHIP_TYPES.COLORED\n  }, \"brain-c-chip\", {\n    \"brain-c-chip--outlined\": type === CHIP_TYPES.OUTLINED,\n    \"brain-o-actionable\": !!onClick\n  }, className);\n  const iconClassName = classnames(\"brain-c-chip__icon\", iconClassNameProp);\n  let color = disabled || type === CHIP_TYPES.OUTLINED ? undefined : colorProp;\n\n  if (color && color.startsWith(\"--brain\")) {\n    color = getCSSVariable(colorProp);\n  }\n\n  const child = wrapLabel(label !== null && label !== void 0 ? label : children);\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n    className: chipClassName,\n    disabled: disabled === true,\n    style: {\n      backgroundColor: color\n    }\n  }, otherProps), {}, {\n    children: /*#__PURE__*/_jsxDEV(IconWrapper, _objectSpread(_objectSpread({}, iconProps), {}, {\n      className: iconClassName,\n      icon: icon,\n      position: iconPosition,\n      size: iconSize,\n      children: child\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\nChip.propTypes = {\n  /**\n   * Content of the chip (overridden with label)\n   */\n  children: PropTypes.element,\n\n  /**\n   * Additional className for the chip\n   */\n  className: PropTypes.string,\n\n  /**\n   * Color of the chip, css variable or color code\n   */\n  color: PropTypes.string,\n\n  /**\n   * If chip is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Icon to display\n   */\n  icon: IconWrapper.propTypes.icon,\n\n  /**\n   * Additional className for icon\n   */\n  iconClassName: PropTypes.string,\n\n  /**\n   * Icon position\n   */\n  iconPosition: IconWrapper.propTypes.position,\n\n  /**\n   * Additional props for icon\n   */\n  iconProps: PropTypes.shape(IconWrapper.propTypes),\n\n  /**\n   * Icon size\n   */\n  iconSize: IconWrapper.propTypes.size,\n\n  /**\n   * Label of the chip\n   */\n  label: PropTypes.string,\n\n  /**\n   * Click handler\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Type of chip\n   */\n  type: PropTypes.oneOf(Object.values(CHIP_TYPES))\n};","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/new_components/molecules/displays/Chip.js"],"names":["React","PropTypes","classnames","getCSSVariable","wrapLabel","IconWrapper","ICON_SIZE","ICON_POSITION","CHIP_ICON_SIZE","CHIP_ICON_POSITION","CHIP_TYPES","COLORED","OUTLINED","ACTION","Chip","children","className","color","colorProp","disabled","icon","iconClassName","iconClassNameProp","iconPosition","RIGHT","iconProps","iconSize","XS","label","onClick","type","otherProps","chipClassName","undefined","startsWith","child","backgroundColor","propTypes","element","string","bool","position","shape","size","func","oneOf","Object","values"],"mappings":"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","sourcesContent":["// Libs\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\n// Utils\nimport { getCSSVariable, wrapLabel } from \"../../_utils\";\n\n// Components\nimport { IconWrapper, ICON_SIZE, ICON_POSITION } from \"../icons\";\n\nexport { ICON_SIZE as CHIP_ICON_SIZE, ICON_POSITION as CHIP_ICON_POSITION };\n\nexport const CHIP_TYPES = {\n    COLORED: \"colored\",\n    OUTLINED: \"outlined\",\n    ACTION: \"action\",\n};\n\nexport function Chip({\n    children,\n    className,\n    color: colorProp = \"--brain-color--blue-100\",\n    disabled = false,\n    icon,\n    iconClassName: iconClassNameProp,\n    iconPosition = ICON_POSITION.RIGHT,\n    iconProps,\n    iconSize = ICON_SIZE.XS,\n    label,\n    onClick,\n    type = CHIP_TYPES.COLORED,\n    ...otherProps\n}) {\n    const chipClassName = classnames(\n        {\n            \"brain-theme--color\": !disabled && type === CHIP_TYPES.COLORED,\n        },\n        \"brain-c-chip\",\n        {\n            \"brain-c-chip--outlined\": type === CHIP_TYPES.OUTLINED,\n            \"brain-o-actionable\": !!onClick,\n        },\n        className\n    );\n    const iconClassName = classnames(\"brain-c-chip__icon\", iconClassNameProp);\n\n    let color = disabled || type === CHIP_TYPES.OUTLINED ? undefined : colorProp;\n    if (color && color.startsWith(\"--brain\")) {\n        color = getCSSVariable(colorProp);\n    }\n\n    const child = wrapLabel(label ?? children);\n\n    return (\n        <div className={chipClassName} disabled={disabled === true} style={{ backgroundColor: color }} {...otherProps}>\n            <IconWrapper {...iconProps} className={iconClassName} icon={icon} position={iconPosition} size={iconSize}>\n                {child}\n            </IconWrapper>\n        </div>\n    );\n}\n\nChip.propTypes = {\n    /**\n     * Content of the chip (overridden with label)\n     */\n    children: PropTypes.element,\n    /**\n     * Additional className for the chip\n     */\n    className: PropTypes.string,\n    /**\n     * Color of the chip, css variable or color code\n     */\n    color: PropTypes.string,\n    /**\n     * If chip is disabled\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Icon to display\n     */\n    icon: IconWrapper.propTypes.icon,\n    /**\n     * Additional className for icon\n     */\n    iconClassName: PropTypes.string,\n    /**\n     * Icon position\n     */\n    iconPosition: IconWrapper.propTypes.position,\n    /**\n     * Additional props for icon\n     */\n    iconProps: PropTypes.shape(IconWrapper.propTypes),\n    /**\n     * Icon size\n     */\n    iconSize: IconWrapper.propTypes.size,\n    /**\n     * Label of the chip\n     */\n    label: PropTypes.string,\n    /**\n     * Click handler\n     */\n    onClick: PropTypes.func,\n    /**\n     * Type of chip\n     */\n    type: PropTypes.oneOf(Object.values(CHIP_TYPES)),\n};\n"]},"metadata":{},"sourceType":"module"}