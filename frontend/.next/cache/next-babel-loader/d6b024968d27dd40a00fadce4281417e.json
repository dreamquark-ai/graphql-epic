{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/lucas/Desktop/advanced/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/lucas/Desktop/advanced/frontend/components/UpdateDataset.js\",\n    _s = $RefreshSig$();\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport { SINGLE_DATASET_QUERY } from '../graphql/query';\nimport { UPDATE_DATASET_MUTATION } from '../graphql/mutation';\nimport DisplayError from './ErrorMessage';\nimport useForm from '../lib/useForm';\nimport Form from './styles/Form';\nexport default function UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_DATASET_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading; // 2. We need to get the mutation to update the product\n\n\n  var _useMutation = useMutation(UPDATE_DATASET_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      updateError = _useMutation2$.errror,\n      updateLoading = _useMutation2$.loading; // 2.5 Create some state for the form inputs:\n\n\n  var _useForm = useForm((data === null || data === void 0 ? void 0 : data.Product) || {\n    name: '',\n    description: ''\n  }),\n      inputs = _useForm.inputs,\n      handleChange = _useForm.handleChange,\n      clearForm = _useForm.clearForm,\n      resetForm = _useForm.resetForm;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 23\n  }, this); // 3. We need the form to handle the updates\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                _context.next = 3;\n                return updateProduct({\n                  variables: {\n                    id: id,\n                    name: inputs.name,\n                    description: inputs.description,\n                    price: inputs.price\n                  }\n                })[\"catch\"](console.error);\n\n              case 3:\n                res = _context.sent;\n                console.log(res); // Submit the inputfields to the backend:\n                // TODO: Handle Submit!!!\n                // const res = await createProduct();\n                // clearForm();\n                // // Go to that product's page!\n                // Router.push({\n                //   pathname: `/product/${res.data.createProduct.id}`,\n                // });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: error || updateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UpdateProduct, \"DMs5ZCFmN9mdDIz3IyIX4qx+dXM=\", false, function () {\n  return [useQuery, useMutation, useForm];\n});\n\n_c = UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["/Users/lucas/Desktop/advanced/frontend/components/UpdateDataset.js"],"names":["useMutation","useQuery","SINGLE_DATASET_QUERY","UPDATE_DATASET_MUTATION","DisplayError","useForm","Form","UpdateProduct","id","variables","data","error","loading","updateProduct","updateData","updateError","errror","updateLoading","Product","name","description","inputs","handleChange","clearForm","resetForm","e","preventDefault","price","console","res","log"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from '@apollo/client'\nimport { SINGLE_DATASET_QUERY } from '../graphql/query'\nimport { UPDATE_DATASET_MUTATION } from '../graphql/mutation'\n\nimport DisplayError from './ErrorMessage'\nimport useForm from '../lib/useForm'\nimport Form from './styles/Form'\n\nexport default function UpdateProduct({ id }) {\n  const { data, error, loading } = useQuery(SINGLE_DATASET_QUERY, {\n    variables: { id },\n  })\n  // 2. We need to get the mutation to update the product\n  const [\n    updateProduct,\n    { data: updateData, errror: updateError, loading: updateLoading },\n  ] = useMutation(UPDATE_DATASET_MUTATION)\n  // 2.5 Create some state for the form inputs:\n  const { inputs, handleChange, clearForm, resetForm } = useForm(\n    data?.Product || {\n      name: '',\n      description: '',\n    }\n  )\n  if (loading) return <p>loading...</p>\n  // 3. We need the form to handle the updates\n  return (\n    <Form\n      onSubmit={async (e) => {\n        e.preventDefault()\n        const res = await updateProduct({\n          variables: {\n            id,\n            name: inputs.name,\n            description: inputs.description,\n            price: inputs.price,\n          },\n        }).catch(console.error)\n        console.log(res)\n        // Submit the inputfields to the backend:\n        // TODO: Handle Submit!!!\n        // const res = await createProduct();\n        // clearForm();\n        // // Go to that product's page!\n        // Router.push({\n        //   pathname: `/product/${res.data.createProduct.id}`,\n        // });\n      }}\n    >\n      <DisplayError error={error || updateError} />\n      <fieldset disabled={updateLoading} aria-busy={updateLoading}>\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            placeholder=\"Name\"\n            value={inputs.name}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"description\">\n          Description\n          <textarea\n            id=\"description\"\n            name=\"description\"\n            placeholder=\"Description\"\n            value={inputs.description}\n            onChange={handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">Update Dataset</button>\n      </fieldset>\n    </Form>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}