""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthIssuedAt_not: String
  magicAuthIssuedAt_lt: String
  magicAuthIssuedAt_lte: String
  magicAuthIssuedAt_gt: String
  magicAuthIssuedAt_gte: String
  magicAuthIssuedAt_in: [String]
  magicAuthIssuedAt_not_in: [String]
  magicAuthRedeemedAt: String
  magicAuthRedeemedAt_not: String
  magicAuthRedeemedAt_lt: String
  magicAuthRedeemedAt_lte: String
  magicAuthRedeemedAt_gt: String
  magicAuthRedeemedAt_gte: String
  magicAuthRedeemedAt_in: [String]
  magicAuthRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
  magicAuthIssuedAt_ASC
  magicAuthIssuedAt_DESC
  magicAuthRedeemedAt_ASC
  magicAuthRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input ProjectRelateToManyInput {
  create: [ProjectCreateInput]
  connect: [ProjectWhereUniqueInput]
  disconnect: [ProjectWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Dataset {
  id: ID!
  name: String
  description: String
  projects(where: ProjectWhereInput, search: String, sortBy: [SortProjectsBy!], orderBy: String, first: Int, skip: Int): [Project!]!
  _projectsMeta(where: ProjectWhereInput, search: String, sortBy: [SortProjectsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  status: String
}

input DatasetWhereInput {
  AND: [DatasetWhereInput]
  OR: [DatasetWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]

  """ condition must be true for all nodes """
  projects_every: ProjectWhereInput

  """ condition must be true for at least 1 node """
  projects_some: ProjectWhereInput

  """ condition must be false for all nodes """
  projects_none: ProjectWhereInput
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
}

input DatasetWhereUniqueInput {
  id: ID!
}

enum SortDatasetsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  projects_ASC
  projects_DESC
  status_ASC
  status_DESC
}

input DatasetUpdateInput {
  name: String
  description: String
  projects: ProjectRelateToManyInput
  status: String
}

input DatasetsUpdateInput {
  id: ID!
  data: DatasetUpdateInput
}

input DatasetCreateInput {
  name: String
  description: String
  projects: ProjectRelateToManyInput
  status: String
}

input DatasetsCreateInput {
  data: DatasetCreateInput
}

input DatasetRelateToOneInput {
  create: DatasetCreateInput
  connect: DatasetWhereUniqueInput
  disconnect: DatasetWhereUniqueInput
  disconnectAll: Boolean
}

input ExperimentRelateToManyInput {
  create: [ExperimentCreateInput]
  connect: [ExperimentWhereUniqueInput]
  disconnect: [ExperimentWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Project {
  id: ID!
  name: String
  description: String
  dataset: Dataset
  experiments(where: ExperimentWhereInput, search: String, sortBy: [SortExperimentsBy!], orderBy: String, first: Int, skip: Int): [Experiment!]!
  _experimentsMeta(where: ExperimentWhereInput, search: String, sortBy: [SortExperimentsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  status: String
}

input ProjectWhereInput {
  AND: [ProjectWhereInput]
  OR: [ProjectWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  dataset: DatasetWhereInput
  dataset_is_null: Boolean

  """ condition must be true for all nodes """
  experiments_every: ExperimentWhereInput

  """ condition must be true for at least 1 node """
  experiments_some: ExperimentWhereInput

  """ condition must be false for all nodes """
  experiments_none: ExperimentWhereInput
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
}

input ProjectWhereUniqueInput {
  id: ID!
}

enum SortProjectsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  dataset_ASC
  dataset_DESC
  experiments_ASC
  experiments_DESC
  status_ASC
  status_DESC
}

input ProjectUpdateInput {
  name: String
  description: String
  dataset: DatasetRelateToOneInput
  experiments: ExperimentRelateToManyInput
  status: String
}

input ProjectsUpdateInput {
  id: ID!
  data: ProjectUpdateInput
}

input ProjectCreateInput {
  name: String
  description: String
  dataset: DatasetRelateToOneInput
  experiments: ExperimentRelateToManyInput
  status: String
}

input ProjectsCreateInput {
  data: ProjectCreateInput
}

input ProjectRelateToOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: ProjectWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Experiment {
  id: ID!
  name: String
  description: String
  project: Project
  status: String
}

input ExperimentWhereInput {
  AND: [ExperimentWhereInput]
  OR: [ExperimentWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  project: ProjectWhereInput
  project_is_null: Boolean
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
}

input ExperimentWhereUniqueInput {
  id: ID!
}

enum SortExperimentsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  project_ASC
  project_DESC
  status_ASC
  status_DESC
}

input ExperimentUpdateInput {
  name: String
  description: String
  project: ProjectRelateToOneInput
  status: String
}

input ExperimentsUpdateInput {
  id: ID!
  data: ExperimentUpdateInput
}

input ExperimentCreateInput {
  name: String
  description: String
  project: ProjectRelateToOneInput
  status: String
}

input ExperimentsCreateInput {
  data: ExperimentCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Dataset items which match the where clause. """
  allDatasets(where: DatasetWhereInput, search: String, sortBy: [SortDatasetsBy!], orderBy: String, first: Int, skip: Int): [Dataset]

  """ Search for the Dataset item with the matching ID. """
  Dataset(where: DatasetWhereUniqueInput!): Dataset

  """ Perform a meta-query on all Dataset items which match the where clause. 
  """
  _allDatasetsMeta(where: DatasetWhereInput, search: String, sortBy: [SortDatasetsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Dataset list. """
  _DatasetsMeta: _ListMeta

  """ Search for all Project items which match the where clause. """
  allProjects(where: ProjectWhereInput, search: String, sortBy: [SortProjectsBy!], orderBy: String, first: Int, skip: Int): [Project]

  """ Search for the Project item with the matching ID. """
  Project(where: ProjectWhereUniqueInput!): Project

  """ Perform a meta-query on all Project items which match the where clause. 
  """
  _allProjectsMeta(where: ProjectWhereInput, search: String, sortBy: [SortProjectsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Project list. """
  _ProjectsMeta: _ListMeta

  """ Search for all Experiment items which match the where clause. """
  allExperiments(where: ExperimentWhereInput, search: String, sortBy: [SortExperimentsBy!], orderBy: String, first: Int, skip: Int): [Experiment]

  """ Search for the Experiment item with the matching ID. """
  Experiment(where: ExperimentWhereUniqueInput!): Experiment

  """ Perform a meta-query on all Experiment items which match the where clause. 
  """
  _allExperimentsMeta(where: ExperimentWhereInput, search: String, sortBy: [SortExperimentsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Experiment list. """
  _ExperimentsMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]

  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Dataset item. """
  createDataset(data: DatasetCreateInput): Dataset

  """ Create multiple Dataset items. """
  createDatasets(data: [DatasetsCreateInput]): [Dataset]

  """ Update a single Dataset item by ID. """
  updateDataset(id: ID!, data: DatasetUpdateInput): Dataset

  """ Update multiple Dataset items by ID. """
  updateDatasets(data: [DatasetsUpdateInput]): [Dataset]

  """ Delete a single Dataset item by ID. """
  deleteDataset(id: ID!): Dataset

  """ Delete multiple Dataset items by ID. """
  deleteDatasets(ids: [ID!]): [Dataset]

  """ Create a single Project item. """
  createProject(data: ProjectCreateInput): Project

  """ Create multiple Project items. """
  createProjects(data: [ProjectsCreateInput]): [Project]

  """ Update a single Project item by ID. """
  updateProject(id: ID!, data: ProjectUpdateInput): Project

  """ Update multiple Project items by ID. """
  updateProjects(data: [ProjectsUpdateInput]): [Project]

  """ Delete a single Project item by ID. """
  deleteProject(id: ID!): Project

  """ Delete multiple Project items by ID. """
  deleteProjects(ids: [ID!]): [Project]

  """ Create a single Experiment item. """
  createExperiment(data: ExperimentCreateInput): Experiment

  """ Create multiple Experiment items. """
  createExperiments(data: [ExperimentsCreateInput]): [Experiment]

  """ Update a single Experiment item by ID. """
  updateExperiment(id: ID!, data: ExperimentUpdateInput): Experiment

  """ Update multiple Experiment items by ID. """
  updateExperiments(data: [ExperimentsUpdateInput]): [Experiment]

  """ Delete a single Experiment item by ID. """
  deleteExperiment(id: ID!): Experiment

  """ Delete multiple Experiment items by ID. """
  deleteExperiments(ids: [ID!]): [Experiment]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsHash: String!
  customViewsHash: String
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
